%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Simplified Chinese
%%Title: shu(1996)_familiarity_type_capicity.eps
%%Creator: Adobe Illustrator(R) 22.1
%%For: Administrator
%%CreationDate: 11/4/2019
%%BoundingBox: 0 0 248 204
%%HiResBoundingBox: 0 0 247.6705 203.3687
%%CropBox: 0 0 247.6705 203.3687
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 22.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 22.1.0 x312 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c143 79.161356, 2017/09/07-01:11:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmp:CreateDate>2019-11-04T18:01:18+08:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 22.1 (Windows)</xmp:CreatorTool>
         <xmp:ModifyDate>2019-11-04T18:01:19+08:00</xmp:ModifyDate>
         <xmp:MetadataDate>2019-11-04T18:01:19+08:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>212</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA1AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FVK6/3nf5Y&#xA;qx6/13S9LKi9m9MzAhAFZjtSpPEGgyueWMOblabRZc18AukWCCAQag7gjLHFIbxVt/tHFWsVXj+4&#xA;P+sP1HFVmKtp9tfmMVaxV2Kr5Okf+r/E4qsxVtejfL+IxVrFXYqvn/v5P9Y/rxVZirZ+wPmf4Yq1&#xA;iq+H7Z/1X/4icVX2X+9KfT+o4qmmKuxV2KuxV2KuxV2KuxV2KuxVSuqfV3r4Yqx3UvL+k6qyNeIz&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <pdf:Producer>R 3.6.1</pdf:Producer>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">R Graphics Output</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>262.666667</stDim:w>
            <stDim:h>209.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>NotoSerifCJKsc-Medium</stFnt:fontName>
                  <stFnt:fontFamily>Noto Serif CJK SC</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 1.000;PS 1;hotconv 16.6.53;makeotf.lib2.5.65590</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>NotoSerifCJKsc-Medium.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>默认色板组</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:8ba34d48-209b-4846-a6f7-ce01e40622b3</stRef:instanceID>
            <stRef:documentID>xmp.did:8ba34d48-209b-4846-a6f7-ce01e40622b3</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:8ba34d48-209b-4846-a6f7-ce01e40622b3</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:DocumentID>xmp.did:066b6695-73dc-f541-8e0f-f6bb0f40d6ee</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:066b6695-73dc-f541-8e0f-f6bb0f40d6ee</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:8ba34d48-209b-4846-a6f7-ce01e40622b3</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8ba34d48-209b-4846-a6f7-ce01e40622b3</stEvt:instanceID>
                  <stEvt:when>2019-11-04T10:20:50+08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:066b6695-73dc-f541-8e0f-f6bb0f40d6ee</stEvt:instanceID>
                  <stEvt:when>2019-11-04T18:01:19+08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -203.369 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 203.369 li
247.67 203.369 li
247.67 0 li
cp
clp
gsave
37.1104 172.51 mo
199.47 172.51 li
199.47 -3.05176e-05 li
37.1104 -3.05176e-05 li
37.1104 172.51 li
cp
clp
37.1104 172.51 mo
199.47 172.51 li
199.47 -3.05176e-05 li
37.1104 -3.05176e-05 li
37.1104 172.51 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.921569 .921569 .921569 rgb
f
.53 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
37.1104 150.83 mo
199.47 150.83 li
1 1 1 rgb
@
37.1104 104.7 mo
199.47 104.7 li
@
37.1104 58.58 mo
199.47 58.58 li
@
37.1104 12.4502 mo
199.47 12.4502 li
@
62.9404 172.51 mo
62.9404 -3.05176e-05 li
@
99.8403 172.51 mo
99.8403 -3.05176e-05 li
@
136.741 172.51 mo
136.741 -3.05176e-05 li
@
173.64 172.51 mo
173.64 -3.05176e-05 li
@
1.07 lw
37.1104 127.77 mo
199.47 127.77 li
@
37.1104 81.6401 mo
199.47 81.6401 li
@
37.1104 35.52 mo
199.47 35.52 li
@
44.4902 172.51 mo
44.4902 -3.05176e-05 li
@
81.3901 172.51 mo
81.3901 -3.05176e-05 li
@
118.291 172.51 mo
118.291 -3.05176e-05 li
@
155.19 172.51 mo
155.19 -3.05176e-05 li
@
192.09 172.51 mo
192.09 -3.05176e-05 li
@
155.19 79.7998 mo
155.19 79.7998 li
155.19 79.7998 li
192.09 146.22 li
.972549 .462745 .427451 rgb
@
155.19 101.94 mo
155.19 101.94 li
155.19 101.94 li
192.09 159.13 li
.380392 .611765 1 rgb
@
42.5405 7.83981 mo
42.5405 6.76999 43.4204 5.89011 44.4902 5.89011 cv
45.5703 5.89011 46.4502 6.76999 46.4502 7.83981 cv
46.4502 8.91989 45.5703 9.79977 44.4902 9.79977 cv
43.4204 9.79977 42.5405 8.91989 42.5405 7.83981 cv
.972549 .462745 .427451 rgb
f
.71 lw
1 lc
42.5405 7.83981 mo
42.5405 6.76999 43.4204 5.89011 44.4902 5.89011 cv
45.5703 5.89011 46.4502 6.76999 46.4502 7.83981 cv
46.4502 8.91989 45.5703 9.79977 44.4902 9.79977 cv
43.4204 9.79977 42.5405 8.91989 42.5405 7.83981 cv
@
42.5405 33.6699 mo
42.5405 32.6001 43.4204 31.7202 44.4902 31.7202 cv
45.5703 31.7202 46.4502 32.6001 46.4502 33.6699 cv
46.4502 34.75 45.5703 35.6299 44.4902 35.6299 cv
43.4204 35.6299 42.5405 34.75 42.5405 33.6699 cv
.380392 .611765 1 rgb
f
42.5405 33.6699 mo
42.5405 32.6001 43.4204 31.7202 44.4902 31.7202 cv
45.5703 31.7202 46.4502 32.6001 46.4502 33.6699 cv
46.4502 34.75 45.5703 35.6299 44.4902 35.6299 cv
43.4204 35.6299 42.5405 34.75 42.5405 33.6699 cv
@
42.5405 70.5698 mo
42.5405 69.5 43.4204 68.6201 44.4902 68.6201 cv
45.5703 68.6201 46.4502 69.5 46.4502 70.5698 cv
46.4502 71.6499 45.5703 72.5298 44.4902 72.5298 cv
43.4204 72.5298 42.5405 71.6499 42.5405 70.5698 cv
0 .729412 .219608 rgb
f
42.5405 70.5698 mo
42.5405 69.5 43.4204 68.6201 44.4902 68.6201 cv
45.5703 68.6201 46.4502 69.5 46.4502 70.5698 cv
46.4502 71.6499 45.5703 72.5298 44.4902 72.5298 cv
43.4204 72.5298 42.5405 71.6499 42.5405 70.5698 cv
@
79.4404 28.1401 mo
79.4404 27.06 80.3203 26.1801 81.3901 26.1801 cv
82.4702 26.1801 83.3501 27.06 83.3501 28.1401 cv
83.3501 29.2099 82.4702 30.0898 81.3901 30.0898 cv
80.3203 30.0898 79.4404 29.2099 79.4404 28.1401 cv
.972549 .462745 .427451 rgb
f
79.4404 28.1401 mo
79.4404 27.06 80.3203 26.1801 81.3901 26.1801 cv
82.4702 26.1801 83.3501 27.06 83.3501 28.1401 cv
83.3501 29.2099 82.4702 30.0898 81.3901 30.0898 cv
80.3203 30.0898 79.4404 29.2099 79.4404 28.1401 cv
@
79.4404 59.5 mo
79.4404 58.4301 80.3203 57.5498 81.3901 57.5498 cv
82.4702 57.5498 83.3501 58.4301 83.3501 59.5 cv
83.3501 60.58 82.4702 61.4599 81.3901 61.4599 cv
80.3203 61.4599 79.4404 60.58 79.4404 59.5 cv
.380392 .611765 1 rgb
f
79.4404 59.5 mo
79.4404 58.4301 80.3203 57.5498 81.3901 57.5498 cv
82.4702 57.5498 83.3501 58.4301 83.3501 59.5 cv
83.3501 60.58 82.4702 61.4599 81.3901 61.4599 cv
80.3203 61.4599 79.4404 60.58 79.4404 59.5 cv
@
79.4404 94.56 mo
79.4404 93.4799 80.3203 92.6001 81.3901 92.6001 cv
82.4702 92.6001 83.3501 93.4799 83.3501 94.56 cv
83.3501 95.6299 82.4702 96.5102 81.3901 96.5102 cv
80.3203 96.5102 79.4404 95.6299 79.4404 94.56 cv
0 .729412 .219608 rgb
f
79.4404 94.56 mo
79.4404 93.4799 80.3203 92.6001 81.3901 92.6001 cv
82.4702 92.6001 83.3501 93.4799 83.3501 94.56 cv
83.3501 95.6299 82.4702 96.5102 81.3901 96.5102 cv
80.3203 96.5102 79.4404 95.6299 79.4404 94.56 cv
@
153.241 79.7998 mo
153.241 78.7202 154.121 77.8398 155.19 77.8398 cv
156.27 77.8398 157.15 78.7202 157.15 79.7998 cv
157.15 80.8701 156.27 81.75 155.19 81.75 cv
154.121 81.75 153.241 80.8701 153.241 79.7998 cv
.972549 .462745 .427451 rgb
f
153.241 79.7998 mo
153.241 78.7202 154.121 77.8398 155.19 77.8398 cv
156.27 77.8398 157.15 78.7202 157.15 79.7998 cv
157.15 80.8701 156.27 81.75 155.19 81.75 cv
154.121 81.75 153.241 80.8701 153.241 79.7998 cv
@
153.241 101.94 mo
153.241 100.86 154.121 99.9799 155.19 99.9799 cv
156.27 99.9799 157.15 100.86 157.15 101.94 cv
157.15 103.01 156.27 103.89 155.19 103.89 cv
154.121 103.89 153.241 103.01 153.241 101.94 cv
.380392 .611765 1 rgb
f
153.241 101.94 mo
153.241 100.86 154.121 99.9799 155.19 99.9799 cv
156.27 99.9799 157.15 100.86 157.15 101.94 cv
157.15 103.01 156.27 103.89 155.19 103.89 cv
154.121 103.89 153.241 103.01 153.241 101.94 cv
@
153.241 122.23 mo
153.241 121.16 154.121 120.28 155.19 120.28 cv
156.27 120.28 157.15 121.16 157.15 122.23 cv
157.15 123.31 156.27 124.19 155.19 124.19 cv
154.121 124.19 153.241 123.31 153.241 122.23 cv
0 .729412 .219608 rgb
f
153.241 122.23 mo
153.241 121.16 154.121 120.28 155.19 120.28 cv
156.27 120.28 157.15 121.16 157.15 122.23 cv
157.15 123.31 156.27 124.19 155.19 124.19 cv
154.121 124.19 153.241 123.31 153.241 122.23 cv
@
190.14 146.22 mo
190.14 145.14 191.02 144.26 192.09 144.26 cv
193.17 144.26 194.05 145.14 194.05 146.22 cv
194.05 147.29 193.17 148.17 192.09 148.17 cv
191.02 148.17 190.14 147.29 190.14 146.22 cv
.972549 .462745 .427451 rgb
f
190.14 146.22 mo
190.14 145.14 191.02 144.26 192.09 144.26 cv
193.17 144.26 194.05 145.14 194.05 146.22 cv
194.05 147.29 193.17 148.17 192.09 148.17 cv
191.02 148.17 190.14 147.29 190.14 146.22 cv
@
190.14 159.13 mo
190.14 158.06 191.02 157.18 192.09 157.18 cv
193.17 157.18 194.05 158.06 194.05 159.13 cv
194.05 160.21 193.17 161.09 192.09 161.09 cv
191.02 161.09 190.14 160.21 190.14 159.13 cv
.380392 .611765 1 rgb
f
190.14 159.13 mo
190.14 158.06 191.02 157.18 192.09 157.18 cv
193.17 157.18 194.05 158.06 194.05 159.13 cv
194.05 160.21 193.17 161.09 192.09 161.09 cv
191.02 161.09 190.14 160.21 190.14 159.13 cv
@
190.14 164.67 mo
190.14 163.59 191.02 162.71 192.09 162.71 cv
193.17 162.71 194.05 163.59 194.05 164.67 cv
194.05 165.74 193.17 166.62 192.09 166.62 cv
191.02 166.62 190.14 165.74 190.14 164.67 cv
0 .729412 .219608 rgb
f
190.14 164.67 mo
190.14 163.59 191.02 162.71 192.09 162.71 cv
193.17 162.71 194.05 163.59 194.05 164.67 cv
194.05 165.74 193.17 166.62 192.09 166.62 cv
191.02 166.62 190.14 165.74 190.14 164.67 cv
@
grestore
false sop
.301961 .301961 .301961 rgb
%ADOBeginSubsetFont: PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H)
%%Title: (PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H Adobe Identity 0)
%%Version: 1
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-1001 -1048 2928 1808} def
/FontInfo 5 dict dup begin
/Notice (Copyright 2017 Adobe Systems Incorporated (http://www.adobe.com/). Noto is a trademark of Google Inc.) def
/FSType 0 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 65535 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 19 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 12 dict dup begin
/BlueValues [-18 -0 532 550 748 767] def
/OtherBlues [-274 -274 -264 -264] def
/StdHW [45] def
/StdVW [98] def
/StemSnapH [36 45 60] def
/StemSnapV [61 98 103] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 1
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 11 dict dup begin
/BlueValues [-18 -0 748 767] def
/StdHW [36] def
/StdVW [94] def
/StemSnapH [36 70 138] def
/StemSnapV [94 106 139] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 2
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 13 dict dup begin
/BlueValues [-250 -250 1100 1100] def
/StdHW [47] def
/StdVW [50] def
/StemSnapH [47 73] def
/StemSnapV [39 50 81] def
/LanguageGroup 1 def
/RndStemUp false def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{
}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 3
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 13 dict dup begin
/BlueValues [-1100 -1100 1900 1900] def
/StdHW [29] def
/StdVW [30] def
/StemSnapH [29 62] def
/StemSnapV [30 62 88] def
/LanguageGroup 1 def
/RndStemUp false def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{
}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 4
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 11 dict dup begin
/BlueValues [0 0 532 532 748 748 818 818] def
/StdHW [44] def
/StdVW [93] def
/StemSnapH [44 60 130] def
/StemSnapV [93 130] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 5
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 13 dict dup begin
/BlueValues [-250 -250 1100 1100] def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [40 120] def
/StemSnapV [40 120] def
/LanguageGroup 1 def
/RndStemUp false def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{
}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 6
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 11 dict dup begin
/BlueValues [-250 -250 1100 1100] def
/StdHW [36] def
/StdVW [36] def
/LanguageGroup 1 def
/RndStemUp false def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{
}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 7
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 13 dict dup begin
/BlueValues [-250 -250 1100 1100] def
/StdHW [48] def
/StdVW [68] def
/StemSnapH [37 48] def
/StemSnapV [46 68] def
/LanguageGroup 1 def
/RndStemUp false def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{
}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 8
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 13 dict dup begin
/BlueValues [-250 -250 1100 1100] def
/StdHW [83] def
/StdVW [60] def
/StemSnapH [59 83] def
/StemSnapV [60 73 97] def
/LanguageGroup 1 def
/RndStemUp false def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{
}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 9
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 12 dict dup begin
/BlueValues [-18 -0 532 550 748 767] def
/OtherBlues [-274 -274 -264 -264 -178 -178] def
/StdHW [44] def
/StdVW [85] def
/StemSnapH [44 61] def
/StemSnapV [56 85 98] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 10
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 11 dict dup begin
/BlueValues [-250 -250 1100 1100] def
/StdHW [46] def
/StdVW [73] def
/StemSnapH [46 61 147] def
/StemSnapV [73 133] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 11
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 11 dict dup begin
/BlueValues [-18 -0 748 767] def
/StdHW [38] def
/StdVW [86] def
/StemSnapH [38 49 75] def
/StemSnapV [47 86 98] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 12
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 11 dict dup begin
/BlueValues [-250 -250 1100 1100] def
/StdHW [45] def
/StdVW [77] def
/LanguageGroup 1 def
/RndStemUp false def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{
}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 13
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 13 dict dup begin
/BlueValues [-250 -250 1100 1100] def
/StdHW [29] def
/StdVW [75] def
/StemSnapH [29 48] def
/StemSnapV [75 94] def
/LanguageGroup 1 def
/RndStemUp false def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{
}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 14
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 13 dict dup begin
/BlueValues [-250 -250 1100 1100] def
/StdHW [35] def
/StdVW [35] def
/StemSnapH [35 49 75] def
/StemSnapV [35 48 74] def
/LanguageGroup 1 def
/RndStemUp false def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{
}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 15
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 12 dict dup begin
/BlueValues [-16 -0 519 534 733 750] def
/OtherBlues [-273 -273 -262 -262 -219 -219 -174 -174] def
/StdHW [44] def
/StdVW [89] def
/StemSnapH [44 74] def
/StemSnapV [60 89 100] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 16
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 11 dict dup begin
/BlueValues [-250 -250 1100 1100] def
/StdHW [52] def
/StdVW [47] def
/StemSnapH [39 52 136] def
/StemSnapV [47 64 134] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 17
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 11 dict dup begin
/BlueValues [-14 -0 707 722] def
/StdHW [43] def
/StdVW [78] def
/StemSnapH [43 60 85] def
/StemSnapV [78 90] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 18
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 13 dict dup begin
/BlueValues [-250 -250 1100 1100] def
/StdHW [36] def
/StdVW [35] def
/StemSnapH [36 50 76] def
/StemSnapV [35 48 75] def
/LanguageGroup 1 def
/RndStemUp false def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{
}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 5 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
62294 <111C60D8A8C9B796767E592A3BC64F3E73D8AFF6D2030D7496F7F35BB
3FE02106F4C886B1C2506B3961985C506FD75124BFFF81B01336979F2FE77B6C
AD5607CC8EA7C003B1194C29BB21BB1C71950D01E9E12FDAB2106F79C1D6346> |
15 <0F1C60D8A8C9B8235668ECA5E7F3F55A5449E1019795AD69FE7E3D9BA446
925D91A3AAB2CEFDCE420623EA> |
62296 <111C60D8A8C9B79676881C02EC2E8C980D683C628EC69DFF2BA91D77F
157FB243B2ABB0AA8EBC682E981C7F9664BD0ED23A5CE2EA7CFC1966F9F97822
EB261B99221E9261E5F0F82282C6CACA3691A350DDF19801C2C735035B98F213
C35053F63D58BA9DECAEB40FD78500853B9> |
62299 <111C60D8A8C9B796767E592A3A3D23E773EEC671ED9BED61A096B4F88
F16CCFBCA81E56379B497BB3B35E49E68D338C09916FB9156F5880EA1FDF1204
6300D2ABE88B3CA1A9951B6DF534C7365C17D2E469502F9495CF22D05BD50CF3
9B7EC7DBCEAF57A11A2D11AC8228D1ED1F3FBEF9BBA84C49495EE> |
0 <051C60D8A8C9B5EE31016ECB81E0C1366BAD401163892378F09CCEE0154E6
2994282057923F54B325CC9A5AE05541130069BD6350B359AFF79A4F1203E4F9
65AFD06CDD29B899DCCFF61E378EF8BE0D6B163503EF8D2BB88E2DA55D0DE272
114CCF5BD1FD2B8ECBBBA5C87B1265A800E5B0CEF> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H-Identity-H /Identity-H 0 [/PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H-Identity-H findfont [9 0 0 -9 0 0 ]msf
14.6704 131 mo
(\363V\000\017\363X\363[)sh
/PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H-Identity-H findfont [9 0 0 -9 0 0 ]msf
14.6704 84.8701 mo
(\363V\000\017\363[\363V)sh
%ADOBeginSubsetFont: PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H 1 GetGlyphDirectory
62301 <111C60D8A8C9B7967688691B567ACF86B2168814E39C714BF8FEB1375
861265284C73D57F2804E26140F64228179B9B4> |
!
end
end end
%ADOEndSubsetFont
/PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H-Identity-H findfont [9 0 0 -9 0 0 ]msf
14.6704 38.75 mo
(\363V\000\017\363]\363[)sh
1.07 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
34.3701 127.77 mo
37.1104 127.77 li
.2 .2 .2 rgb
@
34.3701 81.6401 mo
37.1104 81.6401 li
@
34.3701 35.52 mo
37.1104 35.52 li
@
44.4902 175.25 mo
44.4902 172.51 li
@
81.3901 175.25 mo
81.3901 172.51 li
@
155.19 175.25 mo
155.19 172.51 li
@
192.09 175.25 mo
192.09 172.51 li
@
.301961 .301961 .301961 rgb
%ADOBeginSubsetFont: PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H 5 GetGlyphDirectory
38293 <0D1C60D8A8C9B5EE3176429EC468D61E2BC9858510259A7397CB191E6
AD7398A12B640207540A3A79F131F06F7C8F5953CC53A7B42E1F7518001AF154
5F7DE4AD55317C107D531D218355E49B9F7349F844EB4D304014B088C718888B
96F8A768C5F8640DAF8EF42C25FDFD14318618728782DA2AA5A769CD0437D49C
2D069FA360F2F8CA454096E18E01BA2433334ADF4FFC6D42771D7905BD16C32B
EC888A8DEA6F7ED6ABFE80D73BF68A370F41AEAD2F4FE112B99C9CE0A03B6909
E5E5D829FAFFECE8DF4B2FA146659A54EB27CBF1B38133FCF28B34F2535FE853
ED995A74CD5592053A26BF7AAC153C24AB61C26952657DD1B9CA6691BDBF56B1
BD6CF7F7EE73010EC6178DEC121A4D26C6CC8870FF84191A3FBD8C47D449B219
DED8AD57576F71FD34A9CD5AEFA141CE418ACE63FB360601B0DFB5896E0EC4C4
1F4B45D56CB5224D4B9420CED30F287411E8695FD17A95A1FEA09860ACD83582
2F468AF09C3A126A8F06125D969F748AFA7CBC4EEAF5853643C171FCA8CA7301
AF0B80C0D0B88FA3EB547A6CDE849909E822CE24E63C773C82FDDA75AF5905D1
C5A5A2435EE119ED2142B7A5D7A3332D32CE6E6CDB3D3CD87489B6C4CA50D3E4
FE1BF1CD39898A1F2AD2EB27FB4290BB0751D610183EEC6B4E2C088D3E803745
796914BAB13A39DE731E5DD00A3AE482C6F4B63C92C8D42FAFA8BF165552D294
CA49CFC64A4CB38226CF4884D712C591F3AEE9DBBA3C68FF31553DE3F609129E
C9F508951484E7FB41DC19C2180D1C9054A0B> |
11183 <0D1C60D8A8C9B5EE31713FE5FCBEBE6115BF4538164876051E51E19EF
D26E33148493487723F7DC60B7B2EC356385D051288A9A0393ECF42AC73E721E
34E624B1A84EF55880B56706823BE29CC08FF5C0569E691A7E59C5F4FEF44628
A3464F1A793212AA4DCBD6E45215CC7FD1CE8BB09DD65B592FE863CE5F27B3EF
8755F0A55D126B2BA4BCDD567C3E10A1CA5C659AEE55CBA201F952B5B37613DD
DF2E7F2C30A1A0CBDC4C81FFF10B5E1A4B2C6A44F6984086E299BB4D7F6E4DB1
D78F6E6A8DF6E1BC2AD180BE8E11EC39BF36811C760FC67F2095D9C407AF1E66
31E996E3FEE0E4E374C9F53DA3C456B650E6C4CC14762CE5FB781F9408E98481
D2B7B46B9FBCD20385E1797D33773A73B4E7921950E130DE304081BF03B8D132
947EA6408FB0AA4058FBE12D1A97883F00502EE8F> |
15548 <0D1C60D8A8C9B5EE3176806C779D59FF54C95F38A1EEEA57D04601735
FE6490AE4AF4BAC9D5C650D1BCA72E7AEFC5D1378DB91CB8DAF121908A0F5452
48386098E50FF982B1CE8E0EDC162B611D84F7120F928F425B7ADF58D7B350D7
A620BB8387D2AFA845CD21E25C2A890CB35B09DC72AC40D198D23C637805AEC4
5009CD243A3E88473B1BFBABD7BA063363A8D4D5DA6DCF2858373BD64788498B
02506726BFB29031B678186357CA915B1B4BB0D512DD5B83EC0D879A088C69E7
AE15114B8080DC43C921B3527BE2766CD13A2F13F5B13843D7063CC09C4E319A
6E18885B6C8A5BD16F9377FDD6F34F5D14A672B36627F877DD30A1E85D1A0EB5
08F0A1F507792503864387086D176624DCD3BE984F1543681E19B9C89DE79C30
7EB1D7EBA749DCFC5CD5EFF426E15FCAF4563603EE5723369AD79B4E6C8AAF7F
31B782D1488170586F14D5479252E14797D3327394359FBF2A5DC29C2008A> |
10940 <0D1C60D8A8C9B5EE31764D2BFBC0119C9A5CD21995C6408A3AB804DEC
0D5C7C7E39D244BB2EA82BEA1CFB5EC50F1379E37B8338B0EA9363747C89B765
18092AED0154BD000D57586A14A6A4D12044172419AAD77BD8B6E011D819C4E6
C2304BF9F6B098DFC8B0F484214347A38C268095D9893CB63A80AAD0036697F2
20C73A54D9AABCE068E00612AF907188EE3502B4F225BCE9E7FB8E5E0FAF0AFA
88CA5D9B924B308BFBF943BE9BD0AEA972F1E6E125E6C47F6C2E39C31FCDA565
8836AB2ABE3C7D05332574016197B2BC723891107B91E9AFCEB4E687FBA4A767
8F0A034D07C96DA6DD631CD28D3EFB06E20C17C50AADB592A543BC064D0A5A00
F407BD00168C447955C7D941FA7BA50F3329FF413A29206D72CDD69D645EA1CF
1885CD04442EEC301AB91696EDFE4A50E37D9FAA6133E2D0AB91576D6B35BAFC
8C03442A9> |
15627 <0D1C60D8A8C9B5EE3176E52ACA386463F9D57426A77068BBB05226ABE
874CF3EDAEF79B5E0E15E71DED4519FBF6ACCBB8288D3FA10EB1C0D034E69711
131B2E1AB0E6F57A9A70789C196BC4DBF175584ABCC4D0DC0DF2B21AAF582B69
24A66161865216356D4AAA3A392557044F8D49527B20BEDBB34C2EE6E874C32D
B52428DD4FAA5C7406053524654D71A72B1237E41DCF45E9B52D8D80B251B0DC
F18630A11C7E890954C2F5B1FDE03E0EA8157B074F5EB509F7221E0113141488
07B6DDA405665A0BAD7B5F8B89925ED0730B9EEA4D14C132790DD0307AC0C268
B11F661FA0AFF745290D220E99502203694B055CAC5ECBB24BCE70849B104C68
583C9C6B8B14138D966367502DFD9472C527A3EABFBB380806D8E61CA76F4B7C
6D7A7A4405D861B979FFF5C8CE868679050A8B39DDF0C3D061C86BC190836F63
381F203F93F13573EA78C21FA5694644C6A76552E81EDE53F4F6DE8208E0177B
549AD4D84D095EFC033871004D97FCE20315018A11F5FE80BA4458377F682DD8
E8C2398237AE1345EBD60F2262521FA3FC55CB3> |
!
end
end end
%ADOEndSubsetFont
/PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H-Identity-H findfont [6 0 0 -6 0 0 ]msf
35.4902 181.9 mo
(\225\225+\257<\274)sh
72.3901 181.9 mo
(*\274=\013<\274)sh
146.19 181.9 mo
(\225\225+\257<\274)sh
183.09 181.9 mo
(*\274=\013<\274)sh
0 0 0 rgb
%ADOBeginSubsetFont: PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H 3 GetGlyphDirectory
23134 <0D1C60D8A8C9B5EE3176D64C6AB85F8278E0F024DD517965F905AB5BB
8EF6C8EE13B858415A378FAA044A39647DBB134C8790BA0C7858C11DC5B3C023
A68C53EB312B5327BABC892081FCCB82659068C283FBEC91DEA528A7D68B58C1
C6D9491C471A420369A4F83D53B17A9126207CBEC95675C70EFADF9EEE02AFAE
A6290F18286C6E6D518066966FCDC3784E488C7935FF3F52CF68F041C6782401
5994D5B7329AFB62E> |
29147 <0D1C60D8A8C9B5EE31524451A8C2CB5E0D084EE7B19F720DF56459AED
E8874AE01B7FFC1D255436960402B315521419643E7C7978E98AFAA6FC0460E9
3A6657262A700667D2B81301C6BD15B06205217A22BFD104AF0F8D41671D8052
BA812E30B630F9E8AAACF5B6D0A7774F24FF795BB89DB513F84FD64A45518766
457A741AFF736562BE06EB602DEECCB7EAB9BE092AD5355C47F9EFB1B423727C
AC47A19DAABD12A2C3B4489DC297BC4E45B25E7F689533690D4D0BFE8E83E194
894C2E772DDCF280753E28961C2C85C16FB072EA4B084EE5CCFB11254863C055
9281EB59252B2AE5D1BD8ACA456E58DE76D155C7B8E35EF25FD1DE177AC43983
55575476E9450A3F6FE5E34B73994047FA5372776023A8B51663E3F209437461
CB8B67AF2560464CDEAEA5925602261E3367F26685FC21B2E3A2936C0C784720
439D7E13D8367B7A5D467863053C42C99AD147CE4AFBFCC1203C041958DC21E3
C527381E5C9D3AEC0B9B872CC5277A97092B2AF77D75D3C1DA10222E966A8677
DEB18F9E12D014FE89B81EBD8C510505B6C168E110F61B0B876451E4456A2523
8AE4D9042DD580C3E434A6EC7EB456BE61777F1A7C5479CE7EB04AA2DB200C5C
3C88757E136965004926CBB13905EDEE4A57ED3C3E276721B2005E5952E295DC
329CAB6D5B13142DE76E3E2FB80F268525030BDE1E43FD138652019706E2701F
AE9673F210B7D780A4919870FF346FF15568D197FB0> |
26906 <0D1C60D8A8C9B5EE31764D41B881D1BF8FADF9F2A5C7CD3BE243904B1
C45FC96C3E25DBEEB7F567B07E68F9DDE0C3B328FF637B0D77EB9434FED396A0
9AFBF39C4B8E5A554E873D1862E698947C58A94BC2D7F0543DC1633D101CC2EA
7C491D889FB700E1911CB06291EB90DFC2093C05C293B9DF47B3F6E3E7E91C52
BE3C96483307FD2D0FDC0ADB018F1CF97EE2E0B52A3F7D545020C2ED3183D1CE
BB6A50340E3DAE038192BA793BDDB1F010EDD21C3D570708FAB001C75099F588
C036EB5023049B258C835EB183E1B5DF358BEDEBDDDE7924EFE91A2FB89D9ADE
5509752BAD5B96E9632BF5B6D6E730C0DF9A5E905038561E8E8B4C970B802032
6C36B2E762C57BB97F5721FF12F970FECEB616BDB5016729931133D80A903B48
75C90CD5B2E633B09EB96249822A91BF0949BBB2B8E892FDF7EF1B11F8FA6B19
62BEB6018AA74D27754C5B74CA5C0B3F2C569CBCB6CB5F95A28A63FF028881B9
B87906A89A147632311873F763CF7F49963BCBF92D9876FE08D6DDE0CB380229
7B63704C40A52A6D8921A2B221BAB3CC3DC2EC02D3ADA0E8ED0F1ECF2C509A0B
2589FD9321AEC0BF495BF67380C9D766B9B965202C0BDFD802762A5527ACA27E
54B648B601426CEB97AF3E322ED7E10CB3827C451> |
!
end
end end
%ADOEndSubsetFont
/PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H-Identity-H findfont [0 -11 -11 0 0 0 ]msf
9.68018 105.45 mo
(Z^q\333i\032)
[-11 -11 0 ]ysh
215.911 85.9799 mo
233.19 85.9799 li
233.19 68.7002 li
215.911 68.7002 li
215.911 85.9799 li
cp
.94902 .94902 .94902 rgb
f
1 lc
215.911 85.9799 mo
233.19 85.9799 li
233.19 68.7002 li
215.911 68.7002 li
215.911 85.9799 li
cp
1 1 1 rgb
@
0 lc
217.64 77.3398 mo
231.46 77.3398 li
.972549 .462745 .427451 rgb
@
222.6 77.3398 mo
222.6 76.2602 223.48 75.3799 224.55 75.3799 cv
225.63 75.3799 226.51 76.2602 226.51 77.3398 cv
226.51 78.4101 225.63 79.29 224.55 79.29 cv
223.48 79.29 222.6 78.4101 222.6 77.3398 cv
f
.71 lw
1 lc
222.6 77.3398 mo
222.6 76.2602 223.48 75.3799 224.55 75.3799 cv
225.63 75.3799 226.51 76.2602 226.51 77.3398 cv
226.51 78.4101 225.63 79.29 224.55 79.29 cv
223.48 79.29 222.6 78.4101 222.6 77.3398 cv
@
215.911 103.26 mo
233.19 103.26 li
233.19 85.9799 li
215.911 85.9799 li
215.911 103.26 li
cp
.94902 .94902 .94902 rgb
f
1.07 lw
215.911 103.26 mo
233.19 103.26 li
233.19 85.9799 li
215.911 85.9799 li
215.911 103.26 li
cp
1 1 1 rgb
@
0 lc
217.64 94.6201 mo
231.46 94.6201 li
0 .729412 .219608 rgb
@
222.6 94.6201 mo
222.6 93.54 223.48 92.6601 224.55 92.6601 cv
225.63 92.6601 226.51 93.54 226.51 94.6201 cv
226.51 95.6899 225.63 96.5698 224.55 96.5698 cv
223.48 96.5698 222.6 95.6899 222.6 94.6201 cv
f
.71 lw
1 lc
222.6 94.6201 mo
222.6 93.54 223.48 92.6601 224.55 92.6601 cv
225.63 92.6601 226.51 93.54 226.51 94.6201 cv
226.51 95.6899 225.63 96.5698 224.55 96.5698 cv
223.48 96.5698 222.6 95.6899 222.6 94.6201 cv
@
215.911 120.54 mo
233.19 120.54 li
233.19 103.26 li
215.911 103.26 li
215.911 120.54 li
cp
.94902 .94902 .94902 rgb
f
1.07 lw
215.911 120.54 mo
233.19 120.54 li
233.19 103.26 li
215.911 103.26 li
215.911 120.54 li
cp
1 1 1 rgb
@
0 lc
217.64 111.9 mo
231.46 111.9 li
.380392 .611765 1 rgb
@
222.6 111.9 mo
222.6 110.82 223.48 109.94 224.55 109.94 cv
225.63 109.94 226.51 110.82 226.51 111.9 cv
226.51 112.97 225.63 113.85 224.55 113.85 cv
223.48 113.85 222.6 112.97 222.6 111.9 cv
f
.71 lw
1 lc
222.6 111.9 mo
222.6 110.82 223.48 109.94 224.55 109.94 cv
225.63 109.94 226.51 110.82 226.51 111.9 cv
226.51 112.97 225.63 113.85 224.55 113.85 cv
223.48 113.85 222.6 112.97 222.6 111.9 cv
@
0 0 0 rgb
%ADOBeginSubsetFont: PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H 1 GetGlyphDirectory
46171 <0D1C60D8A8C9B5EE315269E1B24E099B7D037FDEE4C60683137FE2F7F
2DD52FDBF8C23E6C2E3DF883718832D577587E17113A22EE9EA9069821F646EE
9AF42091A43156AF3AE07BF03A9810CCFFCEE183C8FA84185D46696F2ED78D16
936FD17434692BF34A2FCB563846B1686BBE36AAF0AA7D64807F8C6C1E0BB969
FEE5F70CF7D42EB88C81852C553F87753F11DEEDFD61AC2DB2CA9D21F6516B67
CDA2854E3EEEFC0C4801D2CF752CD45F5B386177192510AB92EF8CBB76CBC41B
B2312A90186BD8F2FE635A3DFABEC5D4DD0E2FEE91C8760201DDD397A9AFBD24
84F76A9E68E42883B0A214D3A9B91E299235B4086316657CB4D708C49AE06C77
85D4BE3924E9EF2EDF8E3D7BD56AB292EDBF78081B2B80F16D4D6C048E24E65E
3FA0A0C35864C0D82DAA4AC4CA829161276615EE406497271E04F03D4691EB53
C44FA0FDD6037A0ED3A825CF1C38558A6A2D01CD419869738E73268525EC8261
A39AA629F4F086C7F5FFAF7472AE52C699C172F0F4CECF97632A9FC07B71572A
63A4360CFB9305E362E39AC5E15E6> |
!
end
end end
%ADOEndSubsetFont
/PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H-Identity-H findfont [9 0 0 -9 0 0 ]msf
238.67 80.5698 mo
(\264[)sh
%ADOBeginSubsetFont: PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H 1 GetGlyphDirectory
9562 <0D1C60D8A8C9B5EE31764DAE5D238C2BC32ADAF92E73868C428281A6CE
1901CC1D4F65EB01D5FF454C45A37A46ECEADEF3359D66FA602341E3F23B4971
44DCFAFA08B533E44DFD754CD919F6D9974076043554F2F5BC990AE0FDC6C18B
70ECE68B5006506750EF869080EFDF4C80724CFAA165DAE11C5A3EA9AB09AD61
8D171E5A04648F77CA9EC12AD5A22A54DB99DADE195FA5D15D47BE09F29633B5
5C2947AED1768D9C9C5A5F8B0D4E1D> |
!
end
end end
%ADOEndSubsetFont
/PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H-Identity-H findfont [9 0 0 -9 0 0 ]msf
238.67 97.8501 mo
(%Z)sh
%ADOBeginSubsetFont: PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H 1 GetGlyphDirectory
9981 <0D1C60D8A8C9B5EE31713EB8FD0E39386F4FA72B8CD2B352290ECF2164
B8DBE8E82A33DF0159D7DA665A99ED20E6F110D6B3906A0D3E828AD904863335
F7FA2361FA313473DD0784E5E9EB38FDFBE9CF3574657BAF22587B429D75A34A
3846810289CA28B60A53937BFE03ED8B7908352789E30632EE876B9D76943CEE
FC72D2B9DB43764E3657E65DE2A90694C01BD686B939657FCE0BC8D41E746FB5
24A5430E419B0E1360DFA07A4E85561568DB382F1F4BC37487C8EEB16295C528
5E86B8500048A5CD4FB7A24F97BD7EDADC6EBBA586550C3626B8CC3D57D28228
02AB2EF524FD897D7DC86230008DC153FD87612FCF759162A786F4BF9991A2BC
73C8AA6D91D6E1C2D9DE691D148B31000CA47D701E63700DE07170E388A914C4
271CAAA0EB36F048DDD808FD809B15B02A6098CE825F9F773CAA321F6C9FC315
45258F0A0ADCBCEA477F262F555527BF9E69BF7C49EF54C4DFD281DCFA1C48CD
26A2E1F5989DB4608F3CCF17EDD3DDFE7969E8548CE61C75333139D63D5BD671
C8D7481EFC36B17C10A37E4E96327234E0C35E06C6575B57DA71543B4701CB03
637CCB9391FBD30C09954D9A39F95585FCB1> |
!
end
end end
%ADOEndSubsetFont
/PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H-Identity-H findfont [9 0 0 -9 0 0 ]msf
238.67 115.13 mo
(&\375)sh
1.07 lw
0 lc
44.5068 70.6865 mo
81.5903 94.9365 li
0 .729412 .219608 rgb
@
155.215 122.207 mo
192.028 164.832 li
@
44.6738 33.8535 mo
81.3403 59.4365 li
.380392 .611765 1 rgb
@
44.4238 7.89499 mo
81.3403 28.3115 li
.972549 .462745 .427451 rgb
@
0 0 0 rgb
%ADOBeginSubsetFont: PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H 2 GetGlyphDirectory
25984 <0D1C60D8A8C9B5EE31764D3FE1A795F2F55C98BD41DB2011168A3991D
D224B0C0AF87F54499D66962FF1469DB4A7810AB91A644D91330DD0E800BEBE4
BCA98B0D14E02313905C09994226B3F8A223E5BA21D146450F4D1393CB69BB46
2830DD777F06AB70656171E9FFCEB42BE9672DE33FC7C08BE94012372D271029
C8A8B43A0E29EFE6DDEC62F6F5A61906E18CDEC3A265CDA42BC62EC74855F0DD
962BA32BD71FF1FF9C07E5CA7FEAFB20ED01D8BD671A696F88B191341A65D630
D82AB206077094E408AA04DAA719E7A3E988CC48B054662611CAF2C35AA83871
452AD4FA07072AD3FB0CD23BA5EF7645F033E3B48A3783B96187E2CAE96BE390
3E749F9F911C9D82C07A3917BCE9A5F817E207904FE44B40FB3F136FA08807D3
8989FFE95717C72860E0A4E4FAAD3A6C7EC701AB2A09AC69BF42A8B09190CCC4
6936B123C13CA04AF2F5A98C82BDB97FB52E1F5E78FFDB4244D2BDAD34870F72
27881F7E2A40A60B0FA2D0A5CD31C311EDF5D5BD88A095477ADFD52B49866600
6765498A207BC236A2A07B683E06062E99D140C62C37C13DA307C6ED9D811798
161E69E7E7F41DA86E98E21556243CB49BD07BF23565B41DCD3F6F6D6AAAF85B
4521480CA797E4C529095744155AE68B9327D6A39D96910295E069CD99C2ACBA
D814506F61FD071A7DCFAA159C74305302FB7C01A34D769739683C3827AAA6C3
A9E6DC95E931C7BC3081FDDE54D1E6ACDF0DC23819F1A70EDB68D6BB4D02680B
59422E60BC5163E74E5EE831EB3F2D6C4C1CA623C05A8377B8FDE250AA671954
6FE10B2875395B542F4F12CCAAB246EEA25DD7F4AA24BA4C98D7DB274EB85A61
083A8425B04DA3EBF0D6C38358454569054C5FD91FDBB7B466B3F79B48635864
C2072F2A90618EE64C195187ADBA63D6320E5E44DE7FED2E93336753647CC139
B4EB57067007EF196929050701E7BB1CE3EC3CC96FFECB3B7A2> |
18163 <0D1C60D8A8C9B5EE3176E2437579374C2BFB3E75FFB1AB8B05CB1FE90
E8B5A95E03765125848208AE9B7A0E486AE8037A4FDC7B90F01C254355D6B224
31B5E9C4F8A351B021B91D4B1E3E8DBF5D6E78048BC49D9EE93378971CA044E5
D652A01FE3FEFB37ADFE81960146F7F903CE02B7E805DF9B76A5915E6BAB9A6A
FE80487FF507AEE21B5E9561630910D49E9A9392739254F6BF2ABB5AB5973F7F
888208A2CC8EBBE65F9167ECE9DFA22C456187557D8ECC19284205423825B642
A27421EBD7265F761CB48DF322C14D4885190E6E414B36CE0E0F62AC3865D311
BEFEBB74F7BDEAFEEE447CCC0E9593C28FE41D0935FC039011D65D7C3D76918E
6270D9BD4135EC3706499A315360B0CB909646EAEC6A01336E3F20A59AF75871
03FC7708DFBF6D6B1BF7B2CCDDD7A4E1909AE17B894A406B4423E5B0D6CBBBE9
EA07B9B353A8BCF632D6AC218BBB74F76556D5EA4D6687F5D043AE31F936A4F9
4939FC38E0814FC3BA86D8EDBF2B22DD9AE3DA54EE09010FB07144D4FC821534
C846EF705D55E640B02864B0B971A6656AD718A44330A0C8650A44430B5F00FB
A072DD53A6A7DB02B617B786216B21C866AE87198A689B74BE4BC3CF5C64B096
F5D857C59B21CFCAA6BC7CC9302> |
!
end
end end
%ADOEndSubsetFont
/PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H-Identity-H findfont [9 0 0 -9 0 0 ]msf
49.5483 193.937 mo
(e\200F\363<\274)sh
%ADOBeginSubsetFont: PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H 1 GetGlyphDirectory
9519 <0D1C60D8A8C9B5EE31039A8CB6BBF553339B003160790441C1736B1921
169A7EA3C002A8F945384BCBB29CC7683AD2DD3628735C0568FDCF3232E5722C
D6276DE2DD2D4A06C73D89FEC008A1B0B9B7FD2F4308350382E81B6E57D6B421
8D302983FBDC0C997B2B7DAD37BB8EB342D0F60FC74EAEB6B0D112CAF6C8E996
7ED877840FF4> |
!
end
end end
%ADOEndSubsetFont
/PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H-Identity-H findfont [9 0 0 -9 0 0 ]msf
155.64 193.937 mo
(%/e\200F\363<\274)sh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H-Identity-H uf
/PMQDAM+NotoSerifCJKsc-Medium-GBK-EUC-H /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 17.0
%%AI8_CreatorVersion: 22.1.0
%%For: (Administrator) ()
%%Title: (shu\(1996\)_familiarity_type_capicity.eps)
%%CreationDate: 11/4/2019 6:01 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!j.=d(X5Or1(Z0rt=N#uokI1(uq4.\Lb<.,:af'aglBOLTj0-%PFJIZTOi,'R*&.2-Q88ZbOIdDVl`A@=j'&(G?\a+'e[H[;=V
%(DN!g,;YGu$5fd'm+K?Z5Xr>3G^+JCHalT$hoFsJE\LXV@e;;U[iYG_]lg%4/WRD\IW9k0R8g/nW.b?Fp^+h'-[]7H/a@;MR#CHC
%n-e[Y4+,t'Y7JOe2q6sY&q7UAcaLV4]EI'J/u[m/bg:cQ]oLQ_RTTl5j56!BgEJWZ:WV9+24r@ThT"\gJ&Zsc75$Tmm1[1,CD8QB
%`cLruhd3)_PO65YNii0OA0Z!<n6`/3=0).M)JFUXRe:c$P<"o&R0C.3`EWn;r>!5^Z0c'cGhOcr'GJ!!@6".rX3:41Ym/.!I_`_O
%hn@k4!rQ#m2B0FlJ/a*NYGPh-SqCD's-__mq"'"-gHY\4TDnWcHoLN11A#<I1,JF"gZ*8CraSI>#MAA"26Bf8eXYDkm.asPQc!m&
%Tl0XNr-R<8FH(-La5(V<me,P+cf=WVmTVd8G<%@DfBXZ/KEl_3D`rQQK5b=,_X53[5=XG>;)%]-*!`e.nbIV$*R*Q2;Vt0HDZdHd
%MB#I:NgWaV;k&.FG_<Q_5d&bch4s7Y:,.ai":bmWroWCR=el;P*5$7oOd_Ib'A<Coa3S%L3m!>Z%1lNc^>2KHA`2-`^]I!,5^l3h
%1#i7ChJS8j9pPe2EWbOn:57SC^iT!OGI.ZahH`3m\$VlqFh5\<$HIgPJGX9jEW".0lN4r_oA9<L5N"Un+c_3Sq@?P8a3QmldJ8N+
%Q=0(Q`;D"#S6QQ89s3*t5_.\.@Y_JfI.K\X/H]uF0b_@4JDKVe!t"Ol4&Jd0PJL,E^%e^jqd>3#!JU[TLLGWSZFF9-07NUZ07eCr
%QlFZJbDpd3<]6U,LZ-7bnKMlmU5i[lp'38o:+r9uY2NG_,f&K2e"baJitqD,!3ohcr8R,+(G<JoF%^GM21RZaDZ,60`/rkQJEoC3
%Em)g;3)Eq>*kA/<6QjsD-26_ua8H57ggmga!;+P;3>tc=mN:rRfq0s+<Xn6A0:aVNfo51_RTp>m[6D^Z9BQSZ+r9mB)K)(A,T(>.
%#93XBi3@ca_&@5%.+tKp0AN>Z(Ata`;Tf*O*]p>)qp,I[3Qem@^`8+*#67tdOE*#'P]K*.k!58-DS_4gC^h^*"+%VoFfneV+0^B:
%48W6:TpGZG^_al@A*=f<m#aOj@"ck:Dt!&AX7(3cRDFtg9U:kgGhn9>!WONqEk\>.cLH+Z0su*Y?msU!CXg/1+T%6O^fE-[cII<S
%#&eD2cHWijH4-)uTc*$*bYZgJ)qj+d.-G%I'r-ukD9rOJcU-rM`F(kW!@0?B%W;?!(?E'AS[0%+I.6+XQ=RcmnBWgL+*'>a5H\pU
%"?WB[49/2T%V(_^RSf*[d6mAtYQN0adM^r)i(UG[4-T$S!(rFKHLgQ3Q>;cI:h4igZA1?[c.Mj1+p;:Gg^>FrKbEj.&k>mbnD7V9
%hb7)Bn!p6I*6LZZhk:8KEeF+,j7$*-HWVB=%$253/>,WYC253=+XZs^+aJ!i*,>$EKOib%;U595*>J6/`BgD^0*>&#iOoQLC;RBI
%n5)dgD(*2[-&7TERaZVPB\j-hY0#Y9_;q'lr./@tQ@!bt@G2(PfcK#GNdJEIRIT,4kF5i.PFRg/jLY"A=>upRZD;Y:.B@-Fb<?B[
%Xh\dTc!\q,dC_J>Tf?'"!.,9EHFNS!)jX0j*;;kX7L+$rWdhLPG&%>l[":K,_*Dnj\bWUATD?([q%c(d1\>jU>n6+g?^TKTDjs^U
%"4ZB*eDRdbRt<<U>>s:1H.od[%K?%/>m/`%TrtiIK7\U/D;:,%-AU1mjCDh&_#[R?L:ZK<Jp5nOqgZ#dT:gqS,Wl.dIVn*JT[&N!
%.KQA*p_sJ<&d7tG"]Te6%l!K+T\'X$F*YT[*$?g]bB%\q1:QV&,=Z'd!j&!L^ORsS`pj?4MgJ\I."H99c&3n]J4a#H2G_'?o1h]6
%63H'h/Z9"Q`JQpb^E"R#pO^e:Hbf+'3RIJ-M#tT`TRKJ3JZd7r9n+\u^AISDn7?Vr#4;h#7b9c=n3V,K:iUAt</7:M(r\eg_QGj)
%X9YDT<oZdO2TBRbj4cUhc\6E!nmJPPiaCV.JoHc`-Sr7:K(p`r$kRt*g1oLsHLuTj?AR_MU]@\&KhO+O"`r+a;ml)0HEM*K5eE%Z
%QBiN.-2Y=o8ciRZoDCcS?\<u\<el1=PTAVDV@&*G3F1Vg4TC+6"cR4VN&'DuEU5Ncg[t`=G0p7FVe@IB\%iIWg/2HV:i')-Q3:s3
%0^5R83B2E(a`7Bm?e\=6'OS8"*YEeM$5>EgYj3t;S^f=hGAB\o*nKN9=XJ=(#+L><$X)aSgZ6-WDGZ3uN<ZiZD2A;Gb\@Z,'pZ6A
%Hu?c`FSaX(^3/cJJtArlSDQWaj;&QY5`S2+$j/+9qgU<HK;,ifs';7G5PGT+QT!_%2\]BOq'H",P5TPCJ:1SKb?JX/3hOIsF__(2
%C6QUD/33SSk\UWR3;g;DNF?/Cmm;F*mY6i-Y9.t`W8BsM*Z/+4Ym(p6'.C)h]U/qY8KD-PhsYV"I[:9F,*),<qEdNQf`'WLn66D#
%2$LaC$b14]]R>,sD[/5Z@?kX)1'!Q(8^P6,i6<omS\RRFIn4bgs8D5Clh@GA`:$]M4<!@BfB";`"Ald<\'*e5PS.<Pk6DA'L7o[4
%&,Sl,r#QC2EeE5""US#k^i=tqq,";+q(SE_p=R?-f^!Uj0UES'2#[!Wm_&hXr&sJ]qnM@OCRE2XQb@nGgV<R)5Q1GN^T2OM\$pnT
%kc%lo]g^94-77VEem8>7#1$IL2`o1CSD(dB+N.US?+Y<4>sFX?0AjYZ&F9Rdqr%Ka7qrPkSS&rX-L2+jFAFp6[J6IJL8!BicLH[_
%ri?"d!1<O_3=J!<p\TdREWa8F^?aSS!/1r4Sb1k^+3Ao>qr+ARGbPG-bi@W`l'I>(&i?fp^P&$I[MrsuL4TjQ7i@'Z:C?5V=Es60
%j2l\a:s3,pr778>X?&Iu+.M_"eF'T`YZuCe+dmHabja<j#2=iK^EMdp6Y#n!/^nYFeAJHFNgdBFl[SW0l:op<#>>N'!)%+Wk)&2V
%#'TO+gO9p/"fn47l%4r@l2HV[B^4Zmkr"1SE^jHZN6jK6'='Qp1sHF\U\k)gi1I1e!oIZm$aB$E6c`\#qqLdu?Mk5]hsXN4")AMf
%D/]pfMFP4Rrhl,BJ=rMR4hk?&Gs2*!B-?+3)//U6I+&&n;<+D#9P9V7k=VMQD<-0n\m(80Wn+TH1j/2tT1RXBU9':B&M>a%F8H8;
%[<lBjAkQk'j1ad(USD][%$J+T'_;mGqCm@[)/R<]]")VPZfi\P^DKZqorCT$J-f,HL)Vb=;H"B-?i&GX)lss[d9EJDZ+8jY%s%iS
%Jj0W((=\'Y!'BNS`:tu47R,N/;`)T9Y;Q(NgMd)V07Wbl^\cKps,5e6K0P#T_T$WE#I!M\7C*hSH\g:X.C6LqHsDQ>/MknFg>)8S
%?He&i[6QS7^F`@LnSOPE$(d@L8N:R*O%J0>=($.Pn!2=EZeB<H?:&jpPG56G/k9,d7,=0n(#5Ju]E$FMUC9R\ffUT1.n?[JI&P*)
%:Y<DSTft,"ELEE&3S*"j':\kOR)jW5M91'$-bh0pb\YVuhu:aTr:j(f__$&SDa#]G>U`1D]:[#q"$#T/&Q5IfFh5`C^_'SDf+ZdQ
%p+^aK2p<`&r#1%N%]9K:lR9+(d3LNH;0/bP3CF"SdhW7)88dVg\B&Y^m+\bWhp[=,$1Emm]Q>rsO5@"UKeL\IPaK:M%:dF=6?kUF
%O&F`tTaOBTQ#'Q+Oo<Da]>J;12GTB_.LHj3<L^l`i2!bVQ5#_.%tk,-eV7?&pFl:q5CVp>].o*(6o`-sC)c^t^5'PBe6hO*#Q!MK
%&'I32bk.S=Xpb<L0on)rP/#cl[?ANG+km.g\NN-[>DB<1S>I1<oI,P7gR'?SWbo.7&DL#05raF*EWj;:n`b`B3g`6<Oh`KSe3Y^%
%Q3_/(l.9maV@KmW4(N>G5*#f(@WTmb8hFJBd@O;-Uh4#W0YP^"%:`Y?qfSK?N<AXlJb#,O=YuW%cKG)TA62G,Sr,BJg]tA1*`bRQ
%]4&khef.^%Z.@QR6iD$Md?NQH-'t+C/NKGb#Q%<02L5$;*NURtYo6rPkS"@)g'N<<EkPhJp;5I[kPJStLcsd"jFA'ENFm+(gC8R5
%W26jQ>gLN_R_S7-8hcoLHIA6bZ7U,/<LhZW_iW(7MW>+A7UTJ>f4X"`nKnttg[O-Q]5aH*1n7&ZD\W/Z.rkdtE'7??kG6I@3K,e<
%]/R`I-c!;:2\]X/`U6PN\"529rX=SpkQu[ADc@&)G?_I0Di?@N&ZislHpc`@JbZMWJRi[S5ACL`E;<`DaSVqN-^W_PCYj0!EoIS`
%K]%tKq9'MtCg\qM\d"%'SYu/u]Nu"fpihF$5-Uu;Khom\#;o\K>Y`j[^gR/aGL"&3J[!i$1"LV3!TWjF#Gt8"pb:bEeO05rA3JoH
%%@;%A[@#Lg?[.WEb@[(ClBeIVZT`K[mDAUU1PU4([ltTtB]q4`b-SH?bq<,,[?=C^qXeemgUr!]5n&-igng9r""R0gn.Au3@!62t
%/@K1-9@f4iQ\j9*N^h\_^*"dKFq9J1j/&ECqhAQk:6HPMJb7m-nQ/,5>s[i7YgktI4`\iSC,),VZp11aJ@:&6,/:dE22(TFS1XKX
%C9P54D^]3$1DPoNE6u3\bm^P%KR14`j]'+[!\YA-Do#VEAmi_"kT.2Rm+bo98!eR\XbQq;&Gm6D;GZ-^ikfSsjkBOO\C\)qgC7!\
%N60pBb9k/tXY%ZFo6<$gMY&i8Pe1^G`7Ea:Bm2$"m>s;g!A5`FZCFI.9DcQYRq\caZKO.c^'57h%l'%crn"pac!UL's7iXE_Q3RE
%jYCCrpsm.XO2(Ohn$bO[L]@0/J,R.[plGI:&-(q`hX[07pnrW:S%nbX5Q'V-ro"Cei\uA[f=UruJ-%q1nXobu5Q7F-o@lM,ml4]>
%rVGFOp>>iFs7t1er:Ka_r5V%sMk>Isc[PYaJ,#L_pE+k]-\!:iq6tkKpOE+iJ+_QGqkl[Wqu>p$^\m77MZ<G.rXV6md@^F1X2"88
%s5[6GrJU[[d.,#Ws'#KkLVNHD5Q/d?qVbfZ_/4@`T[o=So(KPBq8Y`!K7E[N5Q7E"rq]Cjm,.f]htuB9s2W%S^\OqFs5RJbSKIn0
%cT&Fb\f^soYC?@-IfrsSmB?Kl2#HNEra-XB>c/*3CZ?t=U!HD5&i(Z])JG/m!6C*ikt!\61ZW;i\"5QnPnJu,S>$3QT.(FmC^L;n
%VAV"aDj<W#=\d=lp'&^&X#uG2L(bEEM9,gRLXmBtZKE[T84H6V=Q'dK0/PL[Jbf:=ojDH!6gH3Z'%*bs$+T88(q_h)kWheYnBl\?
%s7D*H`t,ra1M'De<\"SH!=@ikR_0\U6t`S`nr2BV-+leZ9jp:hS6U%<n`8U6\kj\R(271$Nu<70-0T96ga9e;<gK1D>eDo:*qrKC
%kTS<qO:,WG53[Q@SeA02[J7si_B>Wm'4p!,W>?<*>7JXfepWOKjS0GpQK1H)_h-9rp)1G3DR`%jPe3pSn10L]D@Ekp5*.?S89b%u
%!hBdROVH&rZP[d.:`;l;FVE^"mdLqlj\#"3aSe_L73e6A!5^,$$+9Nd#po8_"g1a2!Wo4i/^;LaWX?dXFN@;m+"&Xe4A`CTIj;35
%,(*\N[KrRW)VBPsm<'_",<n2u7CYkT4a:EIcP(N%W+/)`^qi6rRJ[e]jbHlSb&6uFFplSOi3CePgI6$P:?H=d!slH21k(m#e]`NO
%PG/(s/$]=2%gk/aXF.:3C"l-VV,gdD0Z>oO[d?@8TU2,t7&t%\(S[pGagiPd/8r%;HFD*,#p0!EQ+]lqE6r`=pGUPZT9T!=3-F)*
%&_Ni@]m;Mr;9(C+6cn,2k"!X\H7*:!n@Ii7oW!imC"ICZAV)L$TGZ<O?GKoNrs390aZKmdRQrAu-K58Oo/'3H,JTq0ggN:ohL@`!
%`NdPA-'$R9frWM`TV+EQ:D!_$DZ/[%XGaI&@9:<Kb4pT<nt$0,C;Zd[i!MXk#kO!!#'Zp_$'ZVQs!1T\J+"nq[c<Sq?!)OTrV$S,
%r^\/f`Mc-8;bdS5qE0IBl20Lj!"FNMQqA+rJ(udJCH^s2+3hVDpD*1ko;,q/.a:h$(rHQL8Fuf/%/qq!frrMYIPqGG#2-17QS8+>
%^QuCLp"+WmIdOIKUV;V$"o^4?+Rk/bY<3hW^W[kr[1:QZNK0qHI'LIf\n_(jp>c:)fq.-fanTCPGJ^O7WLed<C0uTXlkoUV'rREp
%ppC.;g63W;:D<YY"<W(g$m53\p++`65G4#*/<10;n_niYHfC;mNK_%:W_5K#[S_g\n7Zg\SG%!1rjfa=-"@]1nD!T,m+hj%&jp0k
%5*=a63\8lbI_#N(Fp+mD4Yk"j=]Z22gq<m<O![p+rd2QJNen<8DDEF$p=:ac7-lYkGS.CP`rs$bs'Z-N%UikW)a_a7Q2?^<oSrt-
%dH_pYX^1WjpcA15#J+ZoGJN[RahG#4!/IN&"])GS,Jd\eBO[7\UX.J>Ea\-6la7Y5%NZ(aUf6_o.5EnQT,h\k4:<GEoSY"9CD.ep
%=^YWqI't@VSjXU8QCtlVa?14H%(":DJf\c-&#jB%+S,JCHkOR)XN=oPMgR_^^"-^;ogH=X[f,[0GKt5S`#@JdhAqrK\NmN6M_*nP
%d/X@l]o.'d!R/MQDt8%<MF@SBe!W!V[(<r/2ln0sV\mX\1SnUm[;D]7Q@9+ZF)$]frKXi[G*"Q_E3X\!mY]7PpH>_3\K8>V9L"G<
%BE!*7;08'C^g3V.[4O/B`fg*N*Q8l-2%hkAU-?1VQPeH2Y!f?n%#Y@62ko39_YcQk2e.#!n*D\=h&nLBOMnIE#VQi]ON6,\;QAI\
%R+_&56d/=ZT84fO\$3`pN@nnMS%Y\Cpe@A9d6@2Lin6N)7b6^a%mI9d+\)rscL;l?oX;[OEedkGaLrD6@RI'sO,QJc!Aoe'*p7Ht
%3E`*h90VQ)X;,"LYr+U;`846a&P(/b7\$5F#XK9g$A,Cn']RPZmL\!Y5p.5d6Ok8Uq@;N(\d[SV'O?MZjj#!"#1>ehIJ*X@,\2/n
%,2mLDKKM.[,:'S5X@OmM8KdO^I2>HnQocQnreqtfqc+TWQ<&;WDr4$H!dWZlSfY"GUhh0Z8>R,n+LQ%5NAT"K#1D:%FiXr-9-URq
%ckrKk^GNSoV_W08+*EVRkr#M!AFQn96\^54!?'AI#+6@U%'g/G4qYBe80ac*k>,Vu__X>!95\nK<NN,T`:O8)C&HE+=lYRAcG%$m
%d%Nl`W,lCd"[JjS9ER;Gn&]7k"TurV/o2dTF:kDCWJch<2-m5GGO)R'ft"94cBNFI6.)g8c7;OnA(.OF=ssC#Nm;dYD@PjqH4,7L
%(sM!N8HSrpkZ@5a<S<^mBK!j7U"@h^42&K/37aQH]k>$l7V).YX6%fW$neU;[ij<!LQC@i+/r"BonfSO8Y;uU.=L0#(=JQ('t:n@
%%GCD+^"K?6pTJ[bZ:m$"C/eF$Vg*Xtd--hHpfP9h6q;I4dc9iBBT%r>XI]"Y%LqQuG93Qb\F[2AT6K8l$Fu'B0]QHY't)p6Xj<TN
%WbicfHZfP?GAV!!Hq+D5Dg0*.IXF*O=E!Y/S$_2s$#W*1c+W)tWGle3)Vb#='=kb'2Grf=_il6k+%(gkqt.BR^+\V9k51V!&\2iE
%2D=fqq<[^%0V&dLe*]a%IPpIF%*3s@)iV*h`S`F$<X-$7(Gl9;fUF$>M4+D_6^h]N%E4[edSMmT6AF)a\n</5M;'_Y4E#scin7bm
%g<Ir5_tr&(Zr>6dUV$?i0Es&D[P=)Gh8X912DCHOiCDr"`3_:C[c=*%8@5J<73UDCDJ##$W""aF&7TYgr@]M7:BX@bWGc9=VLgIu
%,1)ILqQa]e[G,6L1rud+VKiRr9Uf-jB/[c.^=aC5QHe8Q+`)VoX<$HqB4>^14(\Td9.p3[rh,CdGnR8I2!3,pcXXL]Hs/*3_jfLL
%]I,lpNu@]9P&];TQAU5?/M3FV=F,%oD4+,Th^f_Xqdq^T8+0L67sD)ON36efI%WjmP:\Mu4r7QC/#cb1>Gjo^_n+5qiR+8U;cb'I
%iMl1-mD2Q4fok[N`)c0,osWFufk'K!\<=9hDt\#!/aG4)rB>&*HNWu?4o4gHCsUF_[(Y^<]BgX,kG!CeW/g9"d4=Ld`nlR__U+c6
%,3'D+j2a/Rc]2VriQaaO)]?[Y\"#O&3S/o4?ENpk^4G/$N,LKmB.:')3F<`9NY@5Da8&m+oMC`#qLH-qqAK.n+]E&l;q@_g;;rJ\
%<EpSe#nUV@=]5?o_6>;n'+<@7@k:9I7BAe%ENFr7Bl'1d2t?dk8JK347OoOWPB/i.n$MR#M^+2`8&1%4(A((_3Dj"l#e0WI(&*)4
%>\.h)kBcm[79n<YaQM,;Qf,EQDW`?aFb_$N#'[4]e[]$<G8iKk\m)euY.M*^3jWWbrb&F[PE*]P4Ul&Gm-37pW9;WAnIcU1m#gdG
%*uQ7;F4Q.n[FQXMF46ZSoX>689A<0crT6BQY&NW#rl*V#j"p.STe5-o!%p1Kd^/BcP?I_PnX/)*)@et,-Mba4Y:i=`5>L=`rg9Ci
%nlM"7#QG$O#A1^=_%s7K>*V>qV*fe0H;"QIe9D^qe3aOm-?tlLdm81?SI-\V`c\MWGV91)cT,KS6__m;W(HH'Lr?3TL[qsII3<rT
%o>Bb\ocn!sCrJbMbJ5*D,00XY[s=;NX`>IafTsf=iD?9C*e)79ZJk4e&W/hu2-Ce<mIp>A1&Su&5F,?(nfsR.,p&Hhl&ResBkJ^V
%FVuD]dle<]/7tq2dWqHR?0'`cRN/\(dHApK0KM(Sj-]@F2N@M_gI3[.6CCq'QIa)W9]$3(`#VVh=$2?V_XZ>lPD]rul"8rCANNG-
%92FkAY2jOIhOhj9`9O+"90*O@8M]G7R$3Lf&ku+PMcS!q4C+k:cETV,7*QXL?>6`@,6;j6mBQOLl)a[eU.N,WpP\93X-q)&rd6hl
%-o83Rb;^Bb/1gBielL+PZVe&SRVf_1j4UCrc/d)Qr$`GZo[[9L5(:h;RoD@c._VtUU"<$q%t$2u:nEkF_;o*0KhrS@Q/RFc0kr.r
%Rr?cM)+0k3n0Ac&ef,:83/n*(-`_GJIYnc[\#3l"ron.ecq]fF`Dj(+kb*1b9t.Nq5*Id4)'>(=EqZcO/U'.E9a,eaDC`F8XfI]a
%VL*ij1:.\VWl\C5X,jE_\(^I7+01<t7]tmL%#nHE=maa#-1e-skh=V!YQ";n0*b1IqIh\O2(\^'^(G_8#9'eR8>X/PK<qGQ'>g3W
%EOaX@)NrQ^F0#RAP^\XQL5k@thnAHG)2=>.7-8po;R2aC0;D[Thm.^dH!?."7^)LaLAP9hE\`"ON!k]MF^'BF>pR[K2f-"4]]EFo
%cJ,#@$b+BS515JK:L;fChCAG`]K6N%c$Sq/d!K\1C5$lC5506U,ba[kOOmoRijCVSN^b8Hc'g>)\,S4lI[JsEm72P\bs"1,Rm)+a
%mBt'V8Fr6sNKe5>2I!?VK%4nPf,QWj4iYpNp3f`+-:$%`Xg,?!S^3H$_D[hm.XdO!/=LKhb+1m_<&sRhUZV)SFm-tqp4oL-QgJ`M
%N4;>0gm&nFC52.i[\f1lX0N.obK`Ot4J+@P`8*<V-^@0ZD6eO=5f7\9Pl'-JX_h?;=/0SFju:KhZXtEHSZSe?ErM0%pu\\17P/^8
%Msqq]:g5J3GUg0ZRf(0:dYP;tI4#r-D-k8;c=L8,oXG]d=Q*pb^FIjH+"Q'&j8bWEhac>jq4&aR%,u;(9Z6JXA@`OpH>UA<qZ#mN
%bs'Yc_iIC?]9r))Jk^gZ_GHVH*s@[CbDUS4N]X9-O_4(g1\Sm_&*fP14dt2@j;/f?&9Ds^[_t>gVjf3JeF(A?iQ_5g*&7`?(L,0r
%.+r)B-G:6$7S>"n6>RuYHpTmFG=3[>,kQXY,98DJ*s75*Yo$oXI;^Tl(Oc%NDgE+'-`2`_%D@Z&3t=pE_7!N;ep6$WcpWHhK\<iW
%D.986V%@ok;`3LsK_l(2_`0]n<>`(C6>n&j+7R"A2i6dGbl):c!Df]!Nb3'rYr,5=\#G&XmQ!1r)kR/"`":2d,ba%>rBkM0o%&iP
%j,U!!<dqZrHfSV$HB/3[NeK?!]AKJZl+mq(@JQ2bka&Z6iVTqtH:T]?@;NT5O1h`aJ0Q.j6m!q,7NR*E_uTp-YN)0NLB`5G5,"<s
%`9b5&?*n4q00(4_aMAXbnP;m1I^8FAR,VV"2u!rtG8[Ke-eelJY8Y3[hcdnAS:1kd$??@NRTPck_O*]MTha%Z9^Y(GP>6!,S)6FK
%m>SHdN>?8`:Y5\h,a]N<\"!^^h]pN[hmfnFMErV/+%$]mWu&P]+T%#N\d:@Z2,`:D(HMgqi_C*p10+gOlo$=OpQcV#+'OBq83HdB
%Inn_q*pB:DZ>YC[m#BI7lU,a_(;P:nG8>(@Gn7J#-7jI&/8rH_;-?4dKjunp@G_B)F&5-,GC;4),TdFD`;7VA1^&3Q@A0o"!#i5B
%bIZ@[eo9n_pXd<(1=*@hgQEWu1q\NTJHW`\eo3T__\8*+cjnEDkTMpQ5'>N*4AZIEQ"$=J)UKt"4-8r\,QT]TWj!6"Aq0CpYsapi
%2tY2I`%*S08*c#22)0485Ed@,]SdB87`A`KIq_;DnQ7e+XA(l'TC2f*$@C"QWcpIX^(Q(MA/DR1A+#[s.@$8aGN4l9i=$24pS1]8
%BYaZZ_]N3'F[.#\qJ)X\I'ckWjAQBV+O>%?cYID*5S;YM*#7dLPPjLQ'IJ3<,ZrsfU@m;RHeLIlF*X;.&&o!0lp91;$nB5ibF<l"
%glLrcLW9OdC.DO1*'AU2U_5p^/2h:&p34I8-"JWXE;,"$M9k3!pf<JPYW$r1jU16c2i"YYo3bi-5>n@eh@W0ulE@_nY4KG+,30$7
%Xno#]afmP@a$b'9ZkaX\UV)2(d%XZS;bIUnTLQ``=r9Nfo]Gp^S6UDnrC/[0IDqhtj&"%FRf_NZFOG'mq5&hb5GRdhJ0nGQ%]hqK
%K`-a0Tf&%.QYjl\QYq)(@.GR_'Ml?!VrG$3Vp+7J0U;.?imr)F".ho%ll,(hJ!`hT4Pgo`0/Zngj1mEE)iHT4r)d*2e'284RkL7Q
%Zp&rL"#0;s"+XD"7R,i\KAHD?XU`B@nCkJt7T^&YSa&&L!$MC,V8o)u9K$65H]8LhjPT:+<+H\hJbo?jd;tA@UQ,0M>1h+3Xk)Cl
%^?OGP^hU@=\cC+t)pgV;+Z;-Y-E2bWB&]fdf;aPcZN[E^4OoFb]ku13qKtK04JJ`MTM6Bo#S9PW:)`mkXMO7L#kW=JmtkK-q-16"
%Oc/\"qP,-pLJ6J(RX?rC4t%7Wf^#sbX_mClj&<B@e7mj-7>0n1%,?s7-`X]iHs^?(Y;]8BdG,M>iOq>%`(M5D)4E(Znn;o!8>(77
%^V'HZVK))[Lk:[b%"+-K1iI\kB$BZZ@$>Uqk?=RHfB]oIL]EV'UUe+D"@0*t!"De[:SZc]SQGs>m;7D%WZSE4XcQp4pgp]OdHhH<
%@"#u<Ml.3O'"T35SaIG#n@mJeSuhg!&%qB3hBer/f1^+Di+!>Q4l)>D+I_)enH_>8U'HbpQf5LGKNhrs/tR/J<=bW>&co%5kH.kC
%!7TBQ.-:dQ=qL!-GT-FoCfi.GXgeS-\CkXn*IGm$7[:AZHppP)R)1H![c&f>W4'0u`81gXW7BUG*A`&c=_n@?^Lc'SUa&IDqmoD1
%@a:#^aQWof^[&R!U)3#I^;pt=VpubLmH4U>n6"d3_(phAcEp2pO6QXX.hj.SNHQ8\#r3)o!OENl3A@Jc#OH?Uo/UT0JO&n07uAEL
%&[05`*I9mBg9W:j27F*K7RQ=(+L+MA(VO$>-r=sD<<rS":I+2SH=5sc6&]L932D7$W$PVck*N''OfAMiBo)AYRm4Ieb%=UDI2#n:
%'Ol&I1apl^q">'DIL"AP@MX7?2b*=/Vi1._;To[<[![fdJq_9Ni@4,>DJPMQf)Vk\V["">.799%j[65.*+SdU)3V3s<n<LeG-qe3
%Y-/?;'o2'!9qs/'(sEBVE;Kd`I1[B9n?n@8H6UX(,%FgAU\Rr-.<nIn$)Wlb73:f%>p<q3HN`Ie0\)l!J(0(OaW])CZ/-lp=crrs
%]DK<C;lQo;)0:5I^=>HCjfH!EXU8Q$cC;%motfhi,0ei=T(TB-j-JKXK`qP)Ll@GQM$3rj3'njCmG-"Z_D:K]\P,3i'.l.9,r&e.
%f*FU$@^H1/NqF)o$UIl)Sjk\Ca%>lb<C]m4(+9oR=R%'_FrX1ULU*nZeP:gk]\^XiQ"M\<b.?`*Pi%!\9n(*mNk98dS$M^han1%R
%\rOs;j*nF@?8^JOHr_O_G4Qq+,o,#Z*R-g`gjs0MrB,*1DRXWGd"rLr&GT'Qh]&BNK11]`rLJo<.%s7i<&?l]k';).+tQBZ6h]P&
%38.YWHCgL;4AsY53AGhA>$XY5.?MI7-4sKj(!sknA3D(K6i1(*2s[dffYk=%2Z?hnI7k&tr=73AA-W&>>0=&M)Ak$f-r?I:N`BO\
%o;h;="S43NHDMQ*#8%5,;[Vqi7Vh8)'M)D`_'9E-cV5,.Sb"FDg>Z'_;`>,q#7$[kboKI^Z^Kg%U&CO>0[.&c%MYNW=XZT.1&(cd
%7qg\P6[q51o>e9k+Q'5%-Ka1):s@Km+$>@'#>h.5SZ"c?[iZ[@h4K^!FQ`8F/JOYsk^n?D%Vr9b(jh=B@?a+\qmB;=.*"V/`NC`j
%3n)-iD'T*Tj_e-"gl[ZBMH4+PQ\TJ;3-8Uc4G4[rYRBF8L;jl@;L+/EW>HDC+E'`B?t5H)H8gj2qm0'#4!OYQj%lL4_k]"%X^m!s
%:KL5[\Dp!,Yg_,U\JXXa3/c=1'LHuJ6'T'YS]XY@gGds5A0Edhdl:iMQUJnOopP0=Vs'h?C!<IX9]Pd3Sc\MVo!%#k`mXDT>RV6+
%Ac*G/N(r<l[lBcF7.K:OY0_H/]j#YS_Oh4]>8n`)c^rjOV/[IIoi<<_K*&nd#Ld248dl_rLLY$Ha/m\T>Pd=:2(&JdZKKk%Khj,4
%<OZR,D)Z+6*5"-kdl'\]nPUstW"/0V^sd+?>f)NLa+^Q&RHdGpq`]6,mTFNKofM?&ULgb>Ycp;eBj#'h0.6n_ZI])lq`J(uf/,ra
%#MA^3aQMeqr*pL`!ulk@-*hr7"oMEAG4r`^^C>G-.6I$;9KHN4\9^mCSEL6+]M8Hq^sa\k8bVG(:SE'O/hh4X]&BfXlKSi/<4<k'
%^i3[WRf(S3%#gle#CZ7RJ=#oHk2(u\20n-4YZ;:D4qS=&#\3UIUD6F2(paIGPmD.*o-$mYF/uqS7MRg@4=F<!q56MfYjgD-W'Lqg
%-Eq5%?k<rEk6JKSR;qR5;k8t4%#XcnN+!V*drWlmI)`B5cqH'?dZ-9mET[JlTXP[R7e:oE<a"G2)8o=>b\QsPmL2e3nlr8flouCN
%M0p)<q9/N]<+MOM9\FSZATK=onVQ[ofZhH%&eGXZfu*rt$O/]5Olik[K-S(hRuKL+f(?T+%%"B#-hEoER]j?NpJ#+-ZBN-Ed7Wp(
%SnB27#1@E^jORmE#"1H!pZZi[\kG%RTsN'r@Vl-Hp)J^@J)$(0_/rEdUXa\OPAccUBQF6e[U=r<gVJ+[nGG<:5.b'!ZlZ&>":t7N
%5%>WinJY\F/>(9)GY%MZ4HTr*#hKP=Cqhnlfro7DW'"[gV1d4]!"m^/6I9p0Z-#3=mgc`YD=rOL'lj?Lk]%A`#d9ho%;5Y`fe[p[
%\L(%T/st70I>f4('BEapT8H.r8)V;A9dRqN>S><8(8:-g%%'/nZ$:T9p@SuCj[4;d["4M$H/\nDiULopJ;2A$j($E4]FR"S-@Fat
%+ZELWWp?J264E[U48?%`]!5#+H+2H4k3WBm<A3NAhg'X).bSt%?P#_NF4U8L,>W![[X">fL5*q-k@&tgCu@BGFin2#Tcr?7"uB80
%qQUl8nX/28D7Cs$n3r`jq=/(VO(pnb9oS`3(<i?8-i8Sm+c;"q$^'3KW<V3TjGJp5TNF!n+PLaJFrKbG-YkGe.J@r*R9oiYV]h]q
%]`D0sb=<`mEoG,8WV;u$esDCAgkSRtqoCgk?sO'!Fup/KOl6%kqf$bHq!^dHFFWD%noSq\=I)rpKI6"^YJ3+2:<G"u*J(uF#J1@!
%;Ep)N2O6b<\h#1k]jWiFM$C>-S,=S:[\/mrs#K'P:H!<3HY$]2^q;D981b[3/laaDEJPu_a:OV(j*BIHjC*]\mUXi=3%Uk!q6ZdW
%=t*-J^@^m77W&9pJU-j<-MujS'q^.#I=S3-K>0QW7qROr(1:1Em>5Wp>"-`h4@),PFO>-j(![b+/B*MEA^DN)!/oh3DWba#[XVVY
%[GGYc9$FOWMMJ,IYHPT@KdZLbKEEN]aNs$B)K.&0^hoi[]mg"*)ejKgj;p.Tcni(GTgK.I,r.'J\f:V;BL!T[(9BGG)Bc0L&+FmW
%"iUBrG%-$PCGWaUpDqUIm9-GV5P^L+HW8iO+Mt1q$g:Y-qOWS!7P1C=L4-iC*#KCEe_tno?smE2^/%Q8&Sfn9h.-2GSm=!GTMl't
%>m0OhFonsj),?S[]>+E#R=,]!CRc4\[O[7.@*fn_<.PjA:3c&G@IhgN\Ka+q9rI)D,!2`>&il.)"gpTRd]@*'<-1m@P%.($$s@,%
%3k&\F9@d'lRa-RbTaiF(1;;LB4K;aX5DVEa\nthk])>U@^VKW%34I`1$srXe_d:`n2hAf<?Oo8AHJ?q>#@@IPs3[Z/N7f$]a,,.b
%p',pN'@>G`4gE+I6E0D.i=r$FA2LR"GQSt%NAVHi6KU$V>sOU`af*s-V#AqehAQ!_f,JVJ[TY&F&*`m&E.'V]8A3#H2D(BiGou&a
%-r;t?d%i;b:iUW.n3#nE)gk/@*!WS%ap,<VRQq]dC$iJ>VM#67'D',3.(1Q:rj:`!rAZf1==2=BTP/J]Ja$l.3;@i+F\l!Ap!acD
%`KjlEoaa1fh)I*^3p6h=M6<PO*hPnA4I(lbAV2iS9b%H5hF4%M,PV'DM")h/MuRck9#gV$Sa_5R'Xd-ak:)XBc#N.]Dnt8>A(DD4
%A<"rICP/I_V2rk6`bG"Ohg:Ug8TUqA[#-QL?#0OHi7d;Y.>p3W@nlg[e%MO\WIQ/5@pe\YWe*5DcD9c39E#LbA3'SiQLL.s>+O+C
%DZ^9i5*3qXlPYW*m8uOMlDlk<<P%Z#iNY?!EjPII'?Y=p0L4r02_1b"b*41oLdl[J"LG=@'8Bg"i,bae0Z*_.L@'q\#,j&m@.bed
%a>.'N-JkY\R&I^%Pb(>Tb2tRDnqCGIJJ7j!X:i2k@d`oPn9XE$_9QI*KsAJXUCY@TJ#`Z07VoC7:$a]D"=e7O=@Zl8BIRkFL3X4A
%+@F/.#iPeVQh>9+N%mppLF0aF*<C<Ra],"T7`6T]oHM,!B`l;up*)Bs_F+R[T>_Mg,"gaj121)ES+Q&M^lPZ@FTgm&g?;W)W$[4s
%rP7-.\TX*Q2Z=#4KAdWVhF%_'+I2S!1WT:7K5I+AV+c$MjF*WL>O8-cX+@s,,S2LWQ3d[.,b?$;=Ob:u\DA3Aa#abFcl4ZA$&iWV
%*?ubV#J[lWMXW5ZG72]4a?R^TCt4KJoST$`@Fnh-(>GH&BG9RaCH)3TMSEA3J=MK;FT#\WA:A(&a#pL`nDS!rl"&3,#DRG=$E!!$
%)u4k<2hdYrr*1LR&sO3Q#_!C#^DS^)M,u6]UV':"aY0W=R::p;D99ZT2GVQV>EUKk[$*CXqV05)E,pu]iTQ:)6[jAEC?kFO4R>l.
%q<mI-'tG2(.^7ga/pqk/-+k97r68PSkm"nrn7kJk?(BL]bpje_b!/g?8KX"2\Xb;)12qJ9V$(GI8AOi=@"ES;(77a:A</na/'?na
%MXmd?U0MsB(-FmZ[&`;k$Ym4`)V"ronJGUk!8`n6'Uf]XUu@igA<&&a/utPp,#pQ\V0e6ZA@!CeH/;,lmV24MC:'?gHLNHkH8p$=
%<9kOWp'Z,d`(><TRR&+lm@)`NetH'Ahe*.Rc%Ib3dcIj?h&;l5l.B?jTi.<(;?JncR;DX'AkGFfRF)&<.KO$ZBL&Z]jQZ_BY2ARE
%C9FtkT'[#3bm)DS<.N3$UmCN*2T90(plpdRi'Af%-OI?GKMA<1J3>TA<2gi*cP]6F4f2ThcU_"JOTPWk9$\[)K6HP)ao;8>)D<^%
%">g5,E8hP31(KB_hKdC12s0U>I_QEfZNm^-:88QaR)#_Ai=tkX4V",N:t4gJh)OOuI[(M:A#%Oq6RrUC+#[Y*Dq"u.IQWNS>)Zif
%_27rahu:a4rnIJO?iTWQmnQINiR`SQS,`AH<Q#gViNZA`'?rc'<5.1t>2/QW\X+i#AnTVD)T%bih]<9Acfb%K;%Msb@4jQ0Nn'$"
%3G$QEY*DLZTO3E5,-;%FN1q`)D&D]V)(kH&5n?p0:QK]\'<X0[Hb2Z4[J![)WnFg2+Kq!h=\J[>(XG7T88=C?RlQ]7GaS2^X)?Op
%XR(X0l4aZZB!j_a>@jo:_RCH4bkKg/`i,DT`CU=t1nf+Ub">,"5o+Etct]D!HiTd=LP?^TK>pa/k"ErHk-/cDUES,/Vu6cTOeZ4(
%L&m9WKIb=!Kk#Uq@=Rh'9L7H"91[h%&Wed+kfrlF<cEW*]cN6dj`R876?[nkW%bc5?GlXgpFKTOe$7YD1/;5+K!=8FM*pc.ki4>1
%)QZBhl,jF%[:?^Pp5_m2"irRTg!"4X$\<.D1jPl$j-M::HFmY4ZM8SOI$OkkB,snPTVtC"BL/g+>I>5^<>^.\A)ff^G^:0Oi`f!^
%KP,J-[+H7+XJ;PLG1Vt&R$RC?C7m"sigE=Z!<S^M:7=cr*sYsV%uHJaq6^;Ur_Rc_Os;Dd.o+#^"DkU'!7C&5Q"Dae1RPA5+aru1
%<Kn:M\)_R$.k)DI/oU.-0`1XV?g;_^d-E^b%5h58KPTLM6?cCsbtDe>no!uZC"5Eh+f!U"R/'AiBQL9$Sr0@l!#(TJ0fbno'DGk0
%gWj:\cgEj*pa:\D=D3;AK=bRA,e@o?$XJ57#_kZ>j==lT*kf)ZS.m!$,M`n(%:E$6=(.m]+KukR_=Qe;8->X8'Ui7HPDqGE>C1+m
%d'90:<l"5eS33gk$-<4jd62_`VeC>KJYQLu8K9`WjW[4-0U;BW-9g%93uH2pjNbJuM:ELtOp5nuL!o`=3QdRo"snqVGEKAuP%Y,a
%]0.)+@K5iZ([QEAr1BcX5HSA?LY)CTlo@q@[:m$5N]/Tc([caN"C-]eQ,?tqK:qP8^54.jrq%b:YD1-:&8d+3:N:0K8rOAR_il%E
%7pW:u%:YpQSVZ*9X<Q6+CQ"Pq*YPaTlp^!,_GZ2tmt`)E4Ol]502=UoFOr'oYhT;d7!hLk-4^_JQT3nS-)gXb#O@>9pb:MnU8:U*
%VKesZP4%S+eA@Y_n26&)?VNQ!Rf3^_,5d8!4".nZ_Vg"8*ALc-2T309U_%mSjjnr#TTR*oK%`%H*JhE&fS$q-&_hP6h]WE99E8Lh
%%f=_GL<G)aZ^AusG20ko%#:[8Ru+*h]J;^Q[.6M7Optr>&[JqMLW'>@YDGLgC2e!jiE6LB5IG1Clq/oNY(@bnPXZ)N]S6cO27t[R
%lIHfcIc=1Z>BZ3WmC$"<3AJ=LFqjQl0amk7G>n2gpLEG4N+TY#I#YcX@>t\5%-nP#<Y"<HQc:-?R1B"\StcBT/&A,G\8F(h\M"JK
%`PbZkKBl1f^UPI&P6nmV/Qp'n1e.RWhW'n-k`'MmlOCQ\*jN<@C2GDT[DTY$a#+a9+d`u.q6[6M,@V_F%e3_g_j]!!Hd5],X:ND,
%>2O.]O'$>Qb3T5i9#qhZ`8>T5=KTERq`tE:U";51T01P(h(:TLd8Z&Q8Tn1%RelH<Y$bB>/".CM1U:*l\@\"g@YMroJ9ZUAdnEE'
%af3Sj*j>>+_4,=Gbi*d+,-\sg2B#$E$IH;MVK9s*hG%JYd(V7'M'gDVoBFW5hq]5A__-pkQ,t&O_Qa[s-D&SW?4LbCl1hJ!Brk*%
%MuJpm(8\5:1i*%>QBLQOjq1s0YL6P/k*@kaD`gU#eYPg_&M"Q/n^-DK0c@'Grnc],4N_&KFjUn/Y=i;X^!W\F6A>P!DFemd9il^:
%ftJBkLgrBHan@83QomG$g).)s=oHT;R]*idmUACl]dkhg6MBYlLQtkUK"cOo%`bUa<e(BrpGI[@()8L3E/:c2F^&4Heb;XE/^:8R
%/CqJoF(Jjd_M(81?2'g'XVF%/dTH+D:*GmK6mT%gZ]hI)<e,on>UpH[%r!B&h\'T9mJ*N_(@:noTPFj+@Vp9TCDJF9Eh%<^Bqi0h
%3NP[Ag&;hP_4%_p7sn!8KGC4i&\m&b*Ea^bFnJ'p#&B\nhoQD01tJSEA/;\)Jd.HMG<;@^Xt3VBH8LWBYSPWIA0E,5$IS3PD$/8#
%CarR:X:4]2fC,s;>\;CEZ2-%D(Pe:*D:6:d-bsP(EHlX?6u4sLDCK,mlm,p^!,IB&Y<2isA_UXaq(3elpVSrGON!*t>$1K+5j`\_
%'hpm*V'/n:WEstXmoQ+U7a0h%EpDSe5+7Wm!ERP!33[]M3TE"\GMNG^H(eQ?X<HKM)oV#(`CeqO6ENoc@*Ki=X9]jtNH\J,'aKY^
%6aQ+HPR]!P*7i/"Tcdl$ckb(bc)u8(k+`n4QtVrmJd7T)RAX86E"CqH/6:1.gh&6c_B)>;.0Cii30AIn9TJ1$.EOd8"Bo=[]S=d"
%`.bN,:A+SO,?h$0]&fMQdD@#%Ln=0*i&-N1O_:<AlUeJ5cW9/!G0sK@[ZPk3`_Oi`;if!WE1lkpd3SJ9K/SfeL\0%#"D,#tf<JtW
%K\";=bm"g??5LpI2mD;1,Q"7kdfTAnkDtLlnsK.EKK^'k\D6C]oMt@.Q[:b^hd9\A1/HZo0J`9K3jd!dn=uODcmAECJp*!R?fl'h
%_&ScRkJ4Hg#,DRsJ)Eb`f6_fpB'?&OT%:,n7@03N>+`g+B)"dVommur:%JSRVk22>*dlVQ8jC;HAN2i4jrA/PR=M2Fap8qS&P"/\
%k+3V.iF20#OU$)J.fIk6DHe4P;.\'1M$EG"LZ"oLHTc8U<#(q4d-@4c]Hu<39]VKG*"RdL`9nkqNA7$)5C-Ojf2SfBGYL@]^i*m9
%*cpu6nX)+N"`Msm]@T77kE$Z"LQI9pmkV3*26/;0)LZ*QIlhC`B@41F!gi[nbPFRkeIEZ2OU&R@''bn$<7E4F1DD5F<&^SiNM3Y+
%mgPJ=6<eu$fJBtk59R<i<d3ju*ignNE6;X$h5GY$_HShk=Fnk)RM8=RX<.dOdrrLQ()RksqBKH]*O)[W=C!*t]3iR3i#ZZ[0&WtZ
%`5h/Gh&Waej*(<N3I'?p@V'+G"tT1&JSWZ!`p.I3`cYp7g^0@\^h'dVY(\E-kZ81gY]?UeMj!H[=SF=!nlVTJ,0OD.Ui^mjJ@N4V
%PG-M3CchR]?TW6<BP[o`JXW%=gBDH]b[mptV`4)H_,Hp%O</<QVmaC92nm7TZ[f-s=Mp6L1OJ7*kC*Q?2)*eDj,G.:i1_3Q[4D6p
%qQMRqN%-L[(bQb@80G;3CCu#S$0'9VmdJg>32FlJj*De'4+r=g71&0`VV"prKXo-o%SSh(i2bgcpHcO_N,]-%Eh't=nQQ&f^9?#+
%%eHD7OQ^ZSIeR8$dN!m!O'o/]O*q"K(`2\'cha#M9I9,c#8#'K1qT59nmo#-GiKpDad0;R+$5d/Z(9$tY^L"^TZ`(l#0*tk],n8\
%]4;GqLf=m.)F5b(O/g\`o#;6.i'k%.lu"D%g:aPXUkq1TMUl43Ab`*I%"n$dLbnk'!6lhu$AsAFf^iZ<h-+NXYG6%WR3n"KFGT0b
%B5q:EomD>)R/<g;lh=):j-NRM3Tq,.e?Z1Z(_6K\$naf?4sESNOYdTgJS9TM1)j?KPb"BtgI@ST<n4Mu48&tIq`OQugJ((.M(;=s
%WGN9VF,sG;E)u/SOK(i6>'@R`G,&$i@?B7hiRjYQ095uD8t)D[#-M=]3jk/>WV,U\CR8Rs%?M^kRc0DFpN5771?8U+Q#O$fiQT,2
%Gghpb\5@"iE3bWO'PPbmP(_CjCOd`:C*ebmIUK4?$/!-[2+WDkm+Vhg$:_,&$3T#<)M&K&ZlN,?8ObVZ'`Ph+j[DPJ1S=lG$9r^p
%F4'GT!<G=tY203\Z,KBuReDF%"PP=u)`ip>hIO3#W^p9*U1"Z$7X_d2:PNHCA!AjS<\;8X'S]rFE\!E42(=d2Zrk9gQ77@Hgd*!W
%1%NVW3Qn@aeH.NkU;jB5c_Q+=4SJ'daf_3?MUZK+8<[AGVP=pR2N30_ZTCTk6a,Van:sl[eiR@M;2X]up)>M`J2X6mb(Oa9XV%"@
%JN8K>_1j3?D.rip\J!@$f%sDo2@PsZYK&J^Fuu1-]1CR<B!VenMS*.Up<o)R8+Mu;OkBUR!MF+j&NPdW[]]7kSUnC7).fAY\%X-t
%#gfE9mTS'q"8?3okIAuQRF*!c>^+#3J`Y1n@6^AMB6]0]UX^f*:tMC$hB:F>UO&#m2d1s9X5_YL.G5Y:P/O<_"&5$<@]T)nCf+%0
%HV/OSFPp)Dc.[j&ljB]IH"=BRO0N[I6i<=2SL*S=$3q8>ZToUo8aR@*_B2UP]s!cc&J-rs+u`Ar=]ns^<AnKO"_cWRcW:9t8NY52
%m+#(O1s;nNZf2%l4ks/!b$9^fNCLo0%1$g5&&+GbN"/%?&f]%-S#3@8_t=j2lA5CbUZ*05\F.-W9".#B81D/AX7K!EA=%Fs%W3!A
%f9qh.^ouRGZ$XA3Rd&Vm\]>()]8Ug6)N/Xl"`ue"_%ak]_]l#:$7Z4"-%[S,(`-%G$`9j-E^AkBDF,?Iq?mn#7F(SYX;<_s6?W`f
%jJq:Po7*L$#)R@#9bXD?a[Ij>G=fHi8d("'F<79g*Z1p4<iFrk&0ujqOFT9]o>2e/Z(7D$D!+3ZO%N@_Oq=)8O+HjkA7iFp)u#Nc
%7i)"t6`X>CHVUd8?];61m50hI9N`S#X^iUPntL8(?pL9p1p6C>/,=dBo@O>:0,4.\Sm;g"qjq.'@mbS`&MAa"?"2208N`4[pSFl4
%c_1rRJ7%>rB]Tm_L=63u`D=LtKa\TsI&cM\hTXg1Bu7j8#Z0iH]M2]$<uh-M>,_1!EqY@-%kk>KG;n0a]kI5*g0W;JhLa*"U9mfA
%>+Xat(Sq;^[*Cua%1VJ2G,`R"OY`J;Ta5fKeH&ge8.L-)SHWQ;9##0d-isj+%NtXO$fNg)9cBJ\Jn:4VbIFk^bbo@A9DrV['/,lH
%-M5Nr]_k%3A9NqHG7%ol3ABC:ZOBc56_F5F8*pLc)in-th8!q0qCM"\+&$ro>XQ+\:Ue%qg\6lX'XaDa/tf)tRe.E(RrE[Ol^@'J
%/HGP<`CfAf>2V626B)uL-jL,NM`O]_a)Qf=>S`E?"pq_U`j@VAaq-')16F9LTNN$-D#Op?;p'&>>+PO>".^Wo3+iZtVI_G<ATYo-
%Z`NL_[RQ2BV(&6\H,9CLP]$(DNP!X@Z:_TOIR;$<XDU=Tf'7A#RP!mI#ns2sQ&R79%>MVK'R'.3!4k"fJqG9+G"Z]5Wrc2B^cSsU
%A[WdBBU8q6O,G5qfqbb0oo[`=2#'2u^A#f,]/X-^'LEU06h$#_Bc>Pm!)96]Y9(6.cn;d+iMNV73:jOhNRS]HZ`F0m>3oF8EitOp
%_ue@"fjihd2*dO`ohg!S4=V:DB>7u*4BWX+-JNN[4JE.Lc?(gP&e3lOP.-EaC@bM&6#+t*[6r5'!//J+X9*9[do0fc&,6cE%!##-
%&[9V7R-,[17$CkCG..P%#d'l4=.QWL',])nG'?tV9ttXuY,8:!U`j5D7$FEKligS14;4hrGjM8<(G/Q5aVYrUd'>0%9?E0W:5r20
%$NSo#Z4ZHp-5g@J0^_bWT!W*>5u<aA!!d(VcLqd%VHK3B0Wh0-S7?ca,s&cI3.W\tNa^((qqbL*e$fHsJYQah+A4GX/3h8OMtDlk
%4iZuISlAchWd!L=f'S/aj7KuUFqa_g2OX-n767Do\==8`nc:T!.HaX4jh$X'>5D,WT5lM*ga9U)3M1=D+$an<E^&Sg^)Kr6ig7ja
%P\^(;R]D\E.G+.HS<PXTZ(+V#Q4KY!:-"pLer$DJnJ^M:b3`:ff-of\Y2p<X*Z((4SQ=/-C\a!6RVFjT0EG@N!)Fek7O@Y4^)6,+
%/=PW%`.0DH>k'#?WG$)0cO)i"0.5Vj-%q#XR&71k`+@t3q<JALKl79+5jI[:3\Bq`9k=ttAI:k?RSs-<4,"$ge?Z_dHakkL2&,Rp
%m\,kqMWTn1`cm[U=2d#<<^jf=5a=U$!_q\6]j42%]_Xd.C8[7X7N6QCo[h6q8n,P?2SWe+"lrQTP1SCFj3ljHac"&@TQ=t`D!1TX
%4K;t:_M$*R6A\3`L1PQF7%+WtGEO*e#rbJYm-ZD"-">C2Gb^@0_Y7D;]bC`e?Uo+?"jV`IWh\e:ZtRKM'O_cSp7A1sHMCOAB7*88
%PHB0XF^<*gc*N:6D[nXYg+"R0_uO2t&f5[h@&JijD&QlCcj7&d,:[EKR&%g=q!+a.+K_ltSJIu?*eA,jRW"s5A"6Irf\(_Yi'fVN
%e)F(gadPO(5K5!V,=fikiQ.MAd_Ygf;W`D,.]O@d*^^C)pY'Bi<=VC+3NK#R'_Ts.&UUA]TrD#dS3trNNlOT8e;l=D#FbSIa&eX_
%?]Sp($^i?#(N\bN$Bh>WRA1pT,?I^=air#NQ4f,<4M0I?>Io$Q2e2sUFjH%p+XT:s1"CP5asd.>6DmZ!+5AuYbk%T8/HpYnZ["B4
%!eW'/6P[pefdFRKXkN[3-qS9W-oaZ$`HEa&p?!/p32/DE+ib(9.mg@If:l[a%!K`EgSK=aWmCcF.NpJl(icD?qg,VHjuR,_*%ai%
%JHh%s=TK#;0?#`?'Pd:d'p*fGeu@Kq<BG&deM-`Y';*b#nuU8%Dj<u7:6LgTc773oO?a:n%`Nm#j?UCJ:PP_cELh4Fgus_19a?g/
%\?%-`8lP@O4XFE-H(G(3-`;oV2WEp0/;q)/oO\+7bd]W<b]O^Uh'kj4pcF2P?:F:Fk`%PSYfL)i]`F[FRhSai[+E3d*PK"G.UC88
%094o)@Q<4n\gXS-?EKmok`,K]!N[#8.M1$7*<`kSQaO"3#Y>l]c;R)VQ"LP?Q!AG`L3-`hlMQWfKk-isYGMY+rK)H[cLoiZ)D@*N
%mHXUEZZJWo[&/./oD**F-gOK5@kr^PM4Yn.6K"u:=5nFa`g',MKdD1O.U&*1r/Q]l0r+'8Bd^.1:]>_n^-KldA5PB1:ma^lXuuJR
%73^BLmtOo+0:VTUH"GhrcfX5o4lsgKQ!N0\<T_E"?!k,tn%rU;Xd+13afsBrbhHjqo?rZ\aH980gcL3.X44mfR<P*7[5UFU>+'RZ
%Fd=M-G3-lZ)_K)I>[EgG(`RqXi,pRA,eZ(GIA(bH^..'G>k1id&iHRn!`57RX&DCN-%I?!')Gd(]Hpb1Yj%uh0@eF@E2`n00b7Fa
%AhaZak[L/M%aRm[!F:'U!"7o,]9^^S=4M32#98ZmX,m.LMXrRU%U6mC1"hR;o8kmKDg5>+8QM?eV(<#9Kc_pAKf4D&cQHA]-CY?Z
%r;8m4l\VS^=3d,Y?GC`MUQ/JB$M.-$Mou1unpD-:Bn'l$f$j`Bn'9)r"X]_kh)m\28*r8p*iL$7UF/>T:D/uOD^m,4.Cn7nJg+>q
%=-Yq@=Xt#TY?E4KI+9FokA(dRZBBBb,$@TP^J9nB!-FbU=U=53D%*+CV+;Afd:k]+RTDs+Rl^m'MS`5pBBCjeQ;*]+SW@(=P50?m
%N,2@_Jkipi;')dee8p=sh)sT,QQM]t(?NBsWPu]gYUJsFht)apH/dc\bKK@M-r22fE:'A^Km9%U&$EBBcr#.dE$IOg>,h?jQud8m
%l1_*!g<%1Q?To)4K)3./'SOsIG_XR'.e]!JbGHRL6M[.BM.:Iaj`DF7J<WeML5Oe9=p%3,e>o`@1l3ihOV8+O86'E83-s12p'_Q?
%KKGZb]g:.I^%8NGYJXSr$h,qH/n2p-0n9J5-*#:IXkB\i46l-fV&gr@?Y.kHNnEr/&*eP1H$@8;Ln=-nhT)OIAToIu`R$5KA7'L]
%G+s@Z$OYhC`]KW=`N6<1cIBJ,c=Es4bj?@G@R".uA!b0WhF&uKQ-]nRZQtG,3_Et-LdrL:]SZQ:<Ep+?cmTUD4Ws2#f?.);<?>2g
%'mf@mmN^;PdsDEHc^'i$.9]BDlu%L!@YG1Ul9-A!lut[82LBIH8Hl201a'.d`O1]#S6cs]daf'@3=adXMu@asX?e\ME9c.[r9Ref
%48uYj:$kQ!9%7afOakeY<sg)h5Vh*^N.26\m.H3l$>/eaN<6<<9VOCF.H[_'hg9+nQ444AI_IcOqrQh3Q"jXg8Us8/:9TKE=k"f:
%?1MO*?;[J^4Ml/ZYB@OMeD5F01+0l9a.d+Jf/l35=#T?H;k/-NST(QM?FhP/;!DRTe_ItsUe9TX4kUlKmbbglnC0'odFuL%e)7sa
%GRYO[qd`fOZ;e-Wc^6ZTYi'D7@MOCM6HcKY)?Rk?(A</>Aoh!]T9P\X&)1BhYYV:!:Llh"UTdNDMC:K'/h?:PWp74,U_$J9YYQa-
%YE7]Be\XMLW]oB:iDg6^Ud3b7+(fP2@@p4?jL#BmV"T':X64U4qkU7g:,Z-*0C4l0akV]t[_"k7T2_&Hn)@ZQYYWF&3<k;C<nJd"
%eT[1QH?iqke2kkYLp("7-UlM/l+tW2(A:=ZiGi#4>%+&Q(s8XX>uK<&!QlRo"g1\SVd-KI[DKX6RJ,1J4pb'\<LN!\OD/>Bp.;f&
%HfOgWKmcjWrXDs%IEfVm.0.!Pd;'Nk8Stn,ADUZsfI'\LGO"0o>hCE(`[9PE\O'_s<)qi?H?4(7T+j@TVYW.WqkSVXPE#L`$i?a"
%qW(RE+Bb'.Lk.GL,79hC$^@emW$]*n;p(*J>(*5IDsU2Yle^VK7?`VNnWd>V<(md=XAZ_6=<OVj54'Xj^oF[;U4/CJ*(qMojNFeS
%ac`;g[B<i#i3.7aSoAW6Cmt&H,ET"5-FOO]Vn!\fb!pq^`*)s.YcJ.:-J+f<jqPC#3O-bLRb026aqH=AZM4Bi<BMXoJg&:Cd:f_U
%IJKLuZ8peAG=guM'J$mFrPb5>CE*qX4"K8e[S%0kqYbm[?iHrT#^Pt%IsfF/rr,,VohnDKs6Z)2o)4',\"CGkTpP';+Uq1fNS*o=
%4BD8.V*BOV?)*i:Y:73g81DS9Kpk3e$qDmI$:`jJ)SF[&e#/LG]M!cP]s^^#1IQ;0*.)1f8ckQl,W3XcY;Us_E8ML6O*4^T<0LV`
%DWFR#P1_O@;>i/tQ^t!W!E.`';.Zl/<ief1[8\[MCkBhV%IdW_/6"4>]Y[DN$Us4-o:lS)"SB)Z:n0KL!F7Z"G>JEkY$cVL]LmM\
%RVK76ioTjmC>UIO3iVhD;C]:Ua6;39g@9n/R\otE'f-7.ap(,;BMrZZ`CuSe[AA\KZ=Cdr2O-1uJ/*9sZJ?38k::t?W2?Z`PC/TJ
%(</26GI_3N_I<Ij$#)c8K]5*Gd%nEY6?+5&`3`ieA$Adodmq^bFG4353'`henBKe=-b_t=bfbf1'1K0Zir%&1@$@/,8+<!W$&/*2
%rC-J[n\Pgb=9!\c5)Sh-e"kGF^\:OO</3TNcFn^S1`$6l/nrbria.$$hdKZO]DD!oIS$@?MIJJIX&I<Wp[:TE?JI3iqks8bp2p3'
%.eRA1'e<otqdMUOqHQ>STN\`VVYfZWni*:09M5-E0PuN2Vks,8]29IISJh?gN,l.Q0!Fts4sj.+H#)\qjNk9pV<mQK,1NX]:U5/h
%]LD=W3-M6s3mHB0-!Li?'hot_G#UAmpDReG1_s!&M"[jebF2TdeS/Su:F4`(YJ8I_94\Nk2<6%*HhW-V$)#O"9MZ+O<%fF3s!$@,
%b@iK'\iJQ]/7%o3:fr+kYS_<P7C!hIWO,fe]sYpjjNrFLY>]WaHPpXr#'ZEWEGjTLgn?$Z:OM<<6=nkn:=\&Sm:pdQ]sUhem2%@D
%\3i$I.3$UG;8.1XX8U6iR>KX,f>&>bjk/j@[t#gE;arUqh&`J6fMc$I,2A/U@EgM$k&+6PR.J5]&7MPH*I^BfCYt8,-&-EJcHtN"
%q!S^QCCh)fqb'a1a/lOmL-JQ0j]_]oG;Yp$&,9`(s3hir/+].qLI8csd/&9R.RFRr\scCnej4NG<N-=FMFh61o7eb`*'VoK]$"AR
%LZQ*q3NN=:HGHF\9c2t'f#Xud@nNmZc^+rfhCT4c'ijCa-0kTj]\,#"`4Lj:'jnlA8"X=r')K6*!q44\"*1f1Hok&)Lq%WO@nk]A
%R^-%TPfZ!&@D+\VL%g*WPfb'U7Tlh:\e.DBYp,<SHX2^m"qX`44ULI^]>62A?O$rjm5j"@;QAO^>J5?!9'AK$ad8/?8C)N.ICk1H
%QKY]N,'.iJ]eM*V,]:FjD&N.,l`fqobg&'4HR%0?H:t2BTr.L+Z*H)1g@S:d7T-`I:mea=9@LWM6@l3o'";EGb.-](;EdH=lRl7*
%2JYr*\^_78H:u=+DTNA15MRh5l`A#VKfV'6ouc;o1-lF`&8RFYn]'6B4VUquJ53*k_J:_''\MJEo0th%25eXbP`6;Yo'tg_k=nc:
%NHRh>BcaERF\*S@fh%dj)"U0l,H:@+?00.EbI18+DRIL$+OcM@VR"[QFV?l_SSb*e>r#LEb]m=^)M_/+HGn;2Dc)Cd`fe9HK:o,F
%Wj!aGjTncWUmU4GF_b_u9i<\N9NsVRR#6KdD@Z@/:Gm.DW,0Q)'g:fQ9;c>T1fW_'\t\7O?2La[1CraPr),NLs"qa)A"$9uB'*<S
%n'r#j,ZTg<DNU6cZP/^JQP?g_M!slDi2/Q-pa?>tl9)NYWi,Y@L*KDjof"\Ar)!k@9Q^A1]+?E@lhd`*M.6-2;-S>k5,1cE/lD#e
%+,)E`D<0#jN,#>RAr0p&g`E@6Rd*=.V^9)Mcn5n-;l6Np'5?pt;=.\BBrY5AS]*F>b.*WbB!L%1BA+.o'"-:8ZG$'[8YXd^`-mff
%(J>CKeg#4ti0R(L[FQQ0P$uZi8Q7;bOkO%:;G!V6H:4a&gG;G7jd$gqm"[6[,RRYR:lfkFjnM_FU4R_?hHo<GG%[-e.aTH>7hg<u
%V1s*,0"e:Tk,_5@^3j)BNMoDAGB?u]FSOh[QPK(3DL\">'lqcERf+76<k-nG4S*$tZS*hn%bk:fZ9m4Y`Ud3.G$3d`f)%T`\u\^>
%IXks+Z84MXOeYs^/:H9HC13(P$P0F\Wg/;H&%/$EFjYnub-rC?.CE7B_S\%f5^hb26cfDF/"C?#]'rNVKQJGgWmuA2*m0M+b,JES
%??iDrgS)FD:d<H5rk_%aF;&)Ul[fKT2&2?]klqjTgCF&Fbs`Ei.X+W3b42kI%o:i*Q-2ru/j*,$P$Bd/fbY^Pec'is;X^T6n&]SB
%]Z,Y\b-rAuXNjHk4B,Y_3'6L7(EQ`pD`d#/S'*EH<;)+/e#q$0n5-9&;a'OEX:#OlX2rn?iM!,q$890`;#.Oe5n`u>(EP%BoA3"Q
%aaW?g6Q%+jGMAfNQfH7**_I^3nSUGLjZn7%3i9(Y6Dr![4B0&^E:68%I,Uc>MRU[:rVD5'_D3ldYAY]3kk`_]LWV_A,[=Z%iM!7e
%\B]e`arASaBAHM]jmtrdHd\6dGUS)_@c;g5PXP)Z6fm-9V:=A./j*)ko66>Ob:buB._.MSfpuqMIeCQFeY4AW,u@2M*\-VaT;Eo^
%n\RZ`\-e:Yri2rHEoE]I'Rl]J!mnpLs6OVb<(J2tn%usm*&2GZiSbYU'M9+^If7,NjkC9+)_2_2GfUORM;&NTU=1A@4B+4f'I<(Y
%$P*u3+#Zdb.Mj-UQNh5`%ViNC:hqZNKbkg$TLc"jWJZro?$LU37[M&ILDQ3?mqt3$`mZQMnBe1[gEBok?Zb8#EqYmMZM(+&&!`?W
%V"/?9FQ&q;f^*K;<+_T]_Q,;am+n_^3e^7k^[U_tht)aB*\-&jGZfnJn%qG'YrH>[W5XKk/j*+A(jZ!;QX+j7>boPMUbB=K:s;Ym
%D26P_g(uA(<&BU.QHeM-*br0#0"UOK1n(-J+@3Pi">n@>*\+?.2elp#f.#-2(f51po5qO92@?nIDOEIU,8$K&2/ECt8J=OG_9WH%
%><1SJ<()!CWLZdgM7.oL!0uS7"X")5=dT%DPH@V?e7"KNAUMPH4fG,ee"u%4'<Y(ScHS^/MYWiZ\1t'XYcV;5=2nDsP72Kh[Mf\o
%2+!7mbSY>QVGV+_r9:[S"KO+iI57SFA9-s'P>cf.:$!m&1dt1IBY*2YV2K"1qp\%Bs'L-1Q.<qg[/&SABFb@nA4u$D!-neTmt;DW
%KPA(1^Nl6&fuC+&2DDc=pG!8JjX]HCIEh#jkAmAu<1:nL03i,Mlhpq#o?qpF&%3a95?r\!k)[4tn+gJ-pVJ"ZXaTdgWT,CVQ9:&p
%QT+Ltr7+g=So=!h4oSW"0([\!dCjG,>=j%R0&B[@hnn,fpUd7l^Qu8uQ_M9E%o8ZIVk3>A48!IN5(@s*p(36SQC>FDqT;HNC%n:/
%&UAb1R\)OegX1_AgSK&GM!WppCmJ/_etL%OGOe,X^*_;q&)\2&LPJP#@crb(ceWdlS="@bNkBghi;qP"3)r)+>o.%?2_8QuIHZrY
%JK3QlT/;&2H55ah[o3UaE6YZ1Z"@HF>0c`iib"=VhVW5?[@Q^:YD"M""qT1;bm(MHQ,K-*IEnakXY??.guBp*=ppcBpE/tjSPIVB
%Ye80#F-Y^,o[WK[\d%=g,<$op(r\'aY0M`;0#rMIZ>?>Sn]q@U6i0e@=gn0d#V@A7*#F<R8Q[E)[F53N\!:<7KY)p&eV^l5_l&+t
%+o1VhKhoa]`2;_Hch!Z`d#6>Hn_3%!.$l8f&c&0`Vk9M>r2:[3(R<i1IjXZ#_YfjZVXSBDr7[7W$=K"j._!`r#+nrIH"a)EqVLus
%Cn@/%_E.-'All<Bb^&.g6Zt'?HI6%MX][;L.HcCe4?L\g0@nUDAjFso-s5q]"T-.Q9ZGKgT<><8SS.AfCSdimKraIl3epI<b]s^S
%lQQ?E/]>TNYFj_ADI4MnV;+ob^@(-Sb$.7]KP/g\(5[ZMh'iuD5d8]<0H3%qc43P9mS4[)8.kqrQKRZJWAdR".(ss[V7-r+-2@9Z
%9YnU2!kqAo$f!8)5&E9d\[Is;L=oYS;WW"I23N60><]'i<ofk_-sD?19$]Z0eS:MTQCr(3(+p)tP#YlQ#I@#13_>UA%=QRLCXr?'
%kHMUJBAU]9j(\o:)]sroEcUEV)Qg3HMm8W"K#qQ$D4(eQ=TCqKFu.gr:(!tb"O_%'nF\2H/qBE<0AJD8A+8_fTPAB@k"<i9lQXR)
%9j=neh8uGoF)moI;fji(.3bbM8Mb5_r:ukl5$^02G6=#6OYscBHmcI2>_T"T[1td\'X+u0Qd!i>^T*U4Oc$`GYB6pVpSCBf\l4"(
%(Nc"UL8"YR=?7_j%s7qWDEC&<CN=U![jJl^Y'?WejJ.CWH>S4\JPUKa;\Wd45)c`?;^OYJG=Um<=6$RPMKYMYhl:"$/K$s&8s.\k
%`c'?>$I%+uR]%2bl\3S1^Yj:4YU-]V5Vt7apq,-B74qr-\!>4.rdE%.DDoD3gs0]8ki>#`r;nejJiO]aV\IEa;&#a86(+#Si1aAM
%rJ='gg'.&h8;&Ar?X#[On`n<-2tdpTO8rZ>ADOraK#H,^%P(m%Qh00/197AR,tW8&YU!<%dne407m0jJa\7;"]`;#s%@6llarPD=
%>2`KE&&(,WB!cFU57)fAFBY6l9G1T"FV%'LR8.;#j*Ktd\T$__c3>ILYM<rgdpZ0oQC(K!I]>[.LE1WE*OeNUUIWi`CB7hkB6[,i
%JOt`X?uGoo^<F>lKmKaK?j1d:[]AtFDBG!W0CF`:;.IBRNS1_#,tC%\(,K_`Q?G`A>"$6I#&ukt2Y6iY7aQg!VR\0%91O7`<53T+
%diku=&`br,U&m*WbJ;-`Bdj\@D1fg<Uma?L<<6UIja]Cf;YoY?kI+>`V`G.Mio$qhdGXTn]UjtFeRAVJ&bUMTqCBPoZ*bWZQO;Q8
%*8q"+_6q_oPG+sH5X-F"9tEtGpT#S&Q&of6Qc0dXh^!q+HV;$3#Mp"i9<31aZDs(G!d(^?)QlV",>rKLAlpM\/!(+=b669<iPc]i
%!?=#gGnf$I.W+UcB/A8c$MDB!P%ihGR8%UE'dtG$Km:+`eB\NEa*=$@o\,e36\a0SObl6dh).W+aoJ?cV$mbq#%V&]/IpD8jVg;>
%\]O/FXhAU>qak'EVlg"ae)0u:bb;r%kC:_,p<\/Pd"GS4*YDRH4QC<47Nc;T_o1<7TpH:4W>Kna95e*`b&"uHc(jJ"`i5gC\*&*R
%0NAim.#ENiH!7keR61i]n6O_09D0\?I$3>]b,`T`-U,uPkGk>^PCZJ>"_]Sr&M)hR,8W:IX$lc&<"?roI[uMYN?14UpOM2<i3rF+
%o6K21.lV3!X_nImY6oAR3ELbU=qLr$4i7iOX^Ta@)pX89R=!:9Qb-H+C,U37c,61(@e"bk@@MYh7,H+Tnj4_7?9'HXp@J$663Q/&
%#?>8"a]=D?rO^M>`^5+8q]VF[EcUmkekNeh9dFJjnj1bt\rpBqgTG`\,2566g#?I);u+)I8>U@-E*0]_W76$`K`#I+>punk5(-GS
%01+'n@-$mBAQjP"RgED+m'H=nHD"LPpM"d/X-.]gHRp-XT6+-q7eaH4n/Zu-53r**9"Vd\<R1$p+,O"uc04%a5?N6H/>4)Kp;Ed(
%Nk%s7-XrM(<_o`thPH<@fm)BB4('lP"(O7O'A;hFfEZ4\5JSS:+<4o=iMj6u6l0ib/9N,bfE["PSr1kAkT4FVRMh+?cua.O)k!pE
%BP(gsZ$]EOe^g<"LLo^kCr2*>nPiU49_Ffp>&Tgmlc!H(>)l_Y%=l],!\nYNG+iqRrNm%('e+@ZbEng#O`(/C\bVYCYBNdCX^ljR
%Yk,*Q!$]LBjnl`pIBk99_O&GWrbgu&%*LH57gMkYR=)S9-$[MTC?;18r8DFJpg(i/m7tqcq?_oec&=OV$/*S3D^K!RHg%+6L!-n<
%P'ZeR%Up3TZ7pED2:Yn_J%'2&^sn!+52FD!(@"N%$V4Gb-s"94hPfYIa\):WF1$&>Gg"ZENgggfTp9[_TDn\3,_PaA2\Rik+6-9_
%Xj=;F$?87%V;h+;gI7OZQ4_Tc>5"/4bm7gN)WqCRL5pQKJ:ZN?(<M.PDVj_W.p`O"<1`&Bg[;l=e6>OpERl*d1H!=9Yi_UHWDS*I
%Ys'e<&]m5N=JmQ$HW=ZgYr7jsj/4crZr+q.c@A(E7Pl'Ao"tYqc)<5!``chMEgg3j6Nq4t+u]p>Lm,UPaUJSeoMfKN*8<Y50NBLB
%f3&M0`TfA[)N,ENE9a0<&5K'g)jo]-'4.KGiT+&2+InDP8WdOCV5LK5Z)<q)3;'_(J\U<OE/lujcoL*=nBgoY(D3!JG!n,",)M@0
%.G?^E[]&fq=8Au.Z^\_2Q5/MmE4GHp>$aEp2df+LoD-pAQ*Z*FT?\^D(r=X)(\dbDrdg-eoPl7.]XbH\o5GPL>cTrI4p;%W@I"bG
%B+'p3.c.Vnq3?lY<gh^Wm[!:mhJPg5Cp6p3Ahf<DKpp8n.cgs"*[7R28!<&q.9/ZHaqQZSFk!`/CL\ei6-20?p+<9h6dJ0"(u2L+
%_1-i$H7Z<!"U9<5IeE8?)fJU.N1((G#F"#,2uYF'.-9*qK"_H$fSd7@*/X$.#`gUT;g6q`7MI+NhA9%FTHFLfcCuFr?K>i\ft,qR
%YC&>*q/M"<"!l4Lr!H&\ST*rl?4SEEY:<XL,3bqRRCnpr$Aci5_=%eLg2Z2uZqXWUf9POsgLp@$=l=OMs)_4S$_m>Xq0V5J(nrYT
%A!A\Y+#&5inRB&4j2N%TS"8RD+b&$GGdqWn/qe5BH`qf=q,foDq?Dapg[Ydo=^]$e:T7LMMi>`HYse"JS5/3YC:DmCVJ4h,oQ<(N
%,'/NrB$P:B0Pq.l)`$=OV[ZdA'94!#)/#L7\B"`A2IrA<ZcI+c_=8mm,5=(k>HodNb>OJ_`QCdBFM!Y4i:DZW^$TPpQV]RIanO#"
%q5i;^/C`59mJQqAa%E1TH*ai?'9;bV_VKF4S;UIEl=!FL--ei!VKi&n;`b@ig)`9uBC)R0WBA*CR&rkg4D2h#_3n\iT^_56gtua9
%ce>/1)EO=s"5Sa=0sV>o-?EP>_K.eYa<7Es:Z,$<M".`aF#:XNp&cZ0&52&MH>Zk4*lFTs9]8d*/tR.J457TT];+(8XQ<22Xl#!P
%Q92e.UNY<.ENt!?bcT77A"k?CI+)qLB[DGq3E&CQEOl&C7H*b"kLE*_#G4[b_l_+Mb2e<EEjYHQ5*([8OJJ)!T2L'>3H6mu45^];
%hrKt]i9GstVIFDpR/7@QZ218f9G*7&H]eW[nAme_M$H^d3#'H+p.MpLfjli!,S(r8T:jg2P<=**fZ[#9H/tXMFH\h@+*qt1G0M^\
%Llp*WEX=,AmljtZ`:+b!`A@p&J'F`TVTf_EcqsLVs6SEp'8/:<B9@&rMVnGGIAL!l3LW#ms0HlF\[1YX>L,#8@N2Feg'KQ+H*MI9
%,<K0WcPA^pmk(T#lQq$$h`&0>0!QHX'/s0++O@o?Vm"CW&\j>g=/Z_"T=SmHM"4mFf-.8g^Y7)>"'U8`7pDZkMs6hnC5ZVZO1c;d
%4;\_HC0(p.)K.A%=o1!m5'rksLmMI-MRbD<jQ%p9OE&e-f,5`??^);OT>]KWZmY?\,'qWV*c<.i@aX!,Mi0C[,0?do:fgutm;(6)
%>q:0]j_,V13?PbLc#jC0R>5DL4^Fb:S@Z\gF%<0!D\i(#^j_M`clI]/0GO8!&a_[H*%;6<?fr#Z[:;pYZ!^.!dN^[ehMCV9*V,AO
%%SNk]CI/8N+f?>)@!A1_,1-4#.1s^0#9iuY2*#j=VSi0(N_P;+QOZU-DWsds.DH[YRRCiPm/>9H*AV!qRB$_Id4.1/*]c!3O:sOd
%bU$)ED;%BC1[:-ms*8/&@/r*Vf75f*=ke3[M'.6TDBdm(CpBADF@%TYW3bqHA2@2W3bS[LNXStHYeZnmB_JDS3Y<R&#%cgnX:4^O
%nU[7Hd1#AsRklE1#W]k@'5b%++96C+FFp_^T/rc:j#K7GCXEK*hF.6QU,o#dhLp#8G`bo.b.l5sDY>&R#HInbDb^Qr;)`F)440ZP
%BX$,fLPn=mf&?%MT:-7.3n$BkVe8J>RHHN0Njuh;1s*Pcr9a2F7n7.:^&rA"dmj^+_EM353pau?b6L!"7A4YVE\W=Qq<DC.cQSa"
%Vl6Z[.%E2'>VR<-\iFV,g;Ni->(9Q^E*CKE[)pm9N.llGnf2otDGD-\h7>Tuk&B%-"6mj?(HtS5YkDQO#jLi!q-q[O5lA2##jM+d
%5fi.Wgu1t.-g^d5rVAhFn,_MCSaZsM8_/?<"PtCT0EB&NP6u#5O`c+r:bf("?(=C1pHRY\K/</FSY8i^*_u.AP2m/_*g=7C%^">C
%o>D^h)9`3Rg>gp[iTVO&ShCi@h-hMIJU7'V$-mZr2EeIX>9\V@1Jn98c=eNJTP(CrXXC07021FDAL,uB*g_"Eku/+&JXhfqRRb!R
%.8r?[9M_)-USOCsbN2gL:]uW!'p[YD@]+BpG4X0FpY1(%5XMo!o>VsO\NL<jRV`Y]\/tPFFmD-3DsZoD'%peYb29[+>5BZsi+XBo
%`SK7.f:j,:CTI]/efP5(hht9qZb'Kal9,ht]Bre7r4^=C7nBcRf=o/SA8VUB^ZIU:ZKaFMLk[4tiaX!j_INeT@hoC@deOcPXZa!'
%JbYCug,X,I[c?;eAd^B(*HeQlR&)VmSk4(F=.sK?F)1EWr_nXC\9ZoB:m,ihR>cC(C6\4<j1]@C)q=?9X`C8JJ%Y/cIuehF&1om1
%$T)nh$0m;K0+5m_Y7a-7i2R8?,X9h%MNq4OS9Zjcd)6$`R5d3'-^I]uMA-B;"hK3);u&U[PTI%P2AO=V@%YSY;Fe.XQW8s;8<UW'
%/H)qPb4-G<a+UgAqjR)ag*AUNii,X+_.nbX%%`'7`7VeW:VmjFmGa%DFKh?c3^)@3bOm`Xn+<X*d7H\r4I9*fl]_2s[W'&D>o=i!
%$J,X#eV>'e(10WtAZHP#G2$7&at4B^Rtm&ZGlh([U@u.cQqclJ_-ZnX^_'c1"N>5edYF*$`gqt+jO"KMMAc[!AJ/X`6T5?,::NAp
%c$#&6kb^W&o'^\.(7XJmpQ?[)W3%?j(/GU/"S5<\41tM`=lA4jJs/,;O69%oE\*fPS-M6*,g2RMQj+t"3Mm<IGDmf\n?n]E>3Xa4
%+l7)5B)1I8K'?PN_i&*n3ul@kfD;C"n/mC/dMSJqnLi/Id9<DH3/XeBQQEP/g^.+C/A.P#`"L&\p_?N)!%dVMad,<IPs;"5dr)9(
%-T$O6=PbR%oK#QJ=FJ'H=knfX+\[*(d8'@HohFD2*L@u<AU#B_*#N!MB?h0=0a\H2%"g#)F+aYIp1\:h7YRog=C]5_XIJUE<7j*d
%7-+E-HBX$:`Rd6&5TG_tXiG3fH.LOZA3tjT;AC>mh+8'2WT[G$'lr_HlR(%U2s5I8j6)njrSZ+"8j8/?S*"mPg;c'G2pK]BZ7u(!
%Re-8D+*g[WY&]o)9]n?gUU!]H22Xf.&Ru"RKJ2rkNLtfT9E$Ar8F\f]g<VPP+tWhYm2)FU#73)a!c;N?X((CkECn[\9=A0"00_mK
%gR2Q-A"F"[*^a1'/jI>WYgXDL>i';c$%#KRTUDuS\6IgS[Rqo?nof<)8SBsu59*J6:qP^bjuR1*3f/uVFtU*3b<+q9N^cjr./-qb
%Aqh=P:Pj``OcbjHLd3<f4CK+'&f`F89OY,H?J\ot*rsKee[sZ(g.aSo3&iJPU3C80_L(_+1Z7IIc0Idf^s\sugjgT&>*KF/\l0pl
%futqPc1g$M5phK9-V673e^mW34Q/uL3a3CK6C2V77'aO38(sN8J@=@lR6t5X8]#NSSX?.j<e7*_"D.9d1L?+k$XEQ>GNVb!6I?[U
%pk=Z19G11?jdC9rCI8^L:_C.Kf).j83H;NNrEa!4='L),c)@7`A+nhIMJ+P-nmO,0.B=`l>2qP7>+,d=P2())JMRifMe3`ZhG[%(
%4<:So-VD(S?G<j+aQ=a`ThnpU)6n8]R'P?Ph*77l=f)7EIrq%M[u*]Ka\KpHUC+PM67hRu.ZE>[$I&M>NNdJ!eY2m(6]p8N^2":&
%aJ0+\NV)7ZK&DcBGZ<\k\)KI`p+XMq-7<L=jjkn-[a'>f5r#EYi`)mRS$4A2.YfPDoD0f,:o5?M,Kk9>e4SBI@14;PTX<QhhF%Z\
%=XYs]C4.DkcX(([X)sI-=X!6rhoS`20P#l"3E)e?Xhg*Q41]$U>(\!A`R*)-emQS9AnHWuK-;a5PA7!B7BK#=RIfQAiB_d&<cJun
%*6:INR0dU;L+FNeAq=-<+j3c$Va`83Y,/RWQchrKng4)S.n";(o,D[U$a/\1gO2mKmOI4M/5`>P4*b:^DP'U`>([uVD%s9QCC3MR
%no@E`>(\!AK$L>mCG99B$HrX\#"+]OF\[csK-;aUAf7!T[I@4JA7*D5I@^=6$f+7N;):Q3Ke.%P-E&d=Z9i`Oo-mOP0P#lNP1*9)
%CDoX"JB_c=ehi7bLh=/e*jl2>QK(k3e66T>PRceoj*\7]I=CH0:a:8(l-+"6\HlsmRC!'&f(-3;CTTZUI_!6E[h@ZT4r_[Jp2%[f
%nh2ehb;#=C-:CYgNSn0("oQQ,<(8K7&SIqB$.npnAKIp1MT^']bp)QK.:f0Qj&9p#;'gk\7S$!ACNPO;/O?<V2=i&o;=jFuBPTHc
%\uh2XMhn9%!-$-X>K&HL'qVjX@"e9I,a@%=/>uR]\G9;BDYK0%O#+g'kp$3JnN'u`(GC,4?+A^O(NB=b0WeYfMOa%t/f0P=?k.XJ
%WX60#nT?Ca@Y3)lb+Jl`MJsGGW[JZ9ful2Elb#15jVb+jX_jo7MjI@fDd\PcOgbbp'XH.+#%cP>*3JWlL=CXBE8kR)VH"]#7e5?>
%&e)M)Q^rX1nH;`%mY2-3qn7E*Wq5nbZU?2RCI8hdr-?MYj7*'5B?giQ=D8WLGXkJ6^fU=dM;G(\0?PKGRRrSUB.c.&s0N[$'74_h
%RL)ooH2X2Gb"jblp0,o1QB%-"S)HEX705\P;Pk@Eh+H\to^;GEVOjE3Nq'I`ZLtV[ME`c6ed^G/RG*RjU4<nJ;uqV7\9PA<e'0At
%jluT1//5%Y8j]Y"=7OAUe:t;miCE8Tbt&385>'('SZHC!;)<"cIHdY#1<B$1dJ["4KbpV.g$=Dg.pC`u6hBQD*-LEe*jud[-/h7`
%f5$1V,W7gG^i[f,2NC"iER1lkdi7N`!n1[qD_Ad[AmfrJ>T+0@%ON*<$gAP>:K]0\ku&PXI7gr.O0-j"@a3WZCk]7:G=5gpEK<_a
%bXbBNI%;MuVHRVM4oMa7\,@fs&QE$Ylc,t[J40!E$koWK,g^:Ig0!cA>@!o;iX%/u82SENoi0H\GJ510iq1>N$0Df<)`'A'8TJ,G
%h5pK_5XMd+XO>:?paC@KRf_))2W,Bq>F>+B#N4-;!>o#m'6Wdm6gT=)4FXEc4(M["b7Wg&(]!)4jPPoBP@$-9-tHV4ik"`;H(J.j
%Ag5R'h$MVUZ>MeY6,,94Q"gl)LR*1r.#Z=cffG>&&F/85W:nf%#<NnM*;l+0iK"es0Zf&hjlPVW;Eh.Q*[V:uroQ<6ni)gmk*YDq
%Y@(Dl-1?86'C:iIL*"''As,;4Sq'%^&PQTPBO0pX4=2k-@F$P`nu-NsgGbCNP7QQG-XCst<DjB4p"'PcEO28YX>0OTO)Wf+d$T3<
%$WBjmBhXAmnMMYS]$q<@V\M0I2GWZ^Cd&q.Iqo4.q4-JLnAgQIqW4SnF4E`pVF:KsjdM#cP#OriYL9f+GYnJNIJ]mlKW%gLIcG\q
%['!E(!lSafd359;O`R*/Y>5Z&bY'2ZRpt0hI69/9O9(#*7cdh%[kD?^9eiJ6lR5n1/mlX=29:Ug%`=@$4(CCBaa?0[L5(Oe4(J'2
%F%.+l-V>8&,e'^kH!"bin;.@P*451P3ooZ;QepOXCA(3T/ngSq;%pmn%`6f).HeuV+4n:5+%6Qu)G(`A;6[ae-Pniikq:M,Mum%,
%IOjYbE\fQ4BJ[t71Zs)SY3\E%k3adEC9+^Z*Cj4=?9ou5"<8t$FW8<r3dM69q"kh6'eAg<"+k68*%b*f9g\]U#-&9lJVH3!(S^_A
%emK5qar[WD9SaF_=Fm=[il!^=I`du!r5Mh,FF8_d%ce-f.&YT'O^<#mHP_uY>B_QLc>jC7]\A^)g\Qp]<`\MqU.WgU6a\@h8VMR[
%KoS4I2EGPO)POEM%Tn,_W`8W'5`J*/Q&6u?;8tXO*oRpS*PeV7>qkYV`=.1Xpl4--*kM3L!d(hI0l,t*W`0FKmY;V%<0bVW%[Y/%
%QDtRQ<+!]Rr>;>=oh3%88X/5naNmq9<(kQk6p@?MQXoJM*^O9\3qVLQhPc_]R^eqpaR],<O@RrT%*_JZ$[DmJb3atUSX5`#1$DN=
%6I'Re[YEmEYOHQUhfUX)nPn>1m1L7BH0[d4O*]or4dd5>jQb:+9>)O<bodI2.":+Z`hDZ4Q(EC]X=X`8TlpkgAi8e;H8l#'MH<A+
%$82F3dIb-V`9N<9<U@IWM!stZ<qsr'd2Hp$",,BoWr.:PNIKfQN+&.`-r>nVCHqBen;qj92eZtS,F3B]-%n5\`UK`AHb%#b2uL@n
%T+Pr^g,[VDk3O(qR)a>r*T"qOEeJ!2RZtVBbg!8f!Sr`On.2O;Ze!qD"Xjp?gVU.5GpU-9p2PV%Hk`C"F%d_KU7a7C$Bf#@"iBe,
%0JqotG\fH_-jntrUgZN%h0qAYS`rU0g_l,.CoQ\.+On3PHs#DfFtSgAq_]8,L5<msm/"]PigU+aC,b;MQj@f%4sj^Q+!,:;!p6)X
%eYhjs6%M_ZY`_cF+6JM=TA.k:Bgk9Mb3aXmQ0iUmh5A3WmDD(rEB6g`qZW!/kS78c'g,)4"!m#0`:Eoe#*a%R\q8[C&4=\P:Ne;@
%$&AnEkOkoQk>WJpZu%p5OTV+XU3Sc7#%c#<$M7L)o'Pl7:f.^e]@tfH\MO)X#j%)L$Do:cZ^/Q8)96ekY$Ro.Hb!_B;,>Yjf[gZN
%BB*,&rE/?GLA`k2ns.b+\.JJqV,:`A+dukL`9i?o#KB,CmVZWQI!-HUTGc(!6uj+5lo4V\fZ\S%+tEfSKH_s@K?cmN;f1l@8T-*^
%i.0)AW$G&+`"N=D?8!_+eb%=BS3]NEj[2>n)B'Ct7m]KS3pRS2*!lnk7mSESfKe'o"]_+d+J?nUfS>&(Y[R[-!PR:7Jp^fV#(TN*
%JFKrk@Yu6$6,B?F7N]oA1$r6Q?51=@[fB"sH0@bCA0;j6"eE=H'879*.-SCacr+tA_;<B$7*n$).(epFCbNM/csp5%CT#<?-\'j]
%UD;;Zo2Cl%"JhHhkI>6fPH1U8q'7gskgpG;Cg,-`A_Pi,l#q/[jf%K[lFU^dA%ftAd7)[SWg0X/WqA!:FBq6#]%]/Jj]jHD3a&o-
%]<8#S[9q+qW.T=<k&.ku:Ui$NFu<R+3d3\nR7k!>Yc](NmI91oC(nO$7j?M(-Q4*aA(CZs6`uh8(YeA(b0lfpj5u6RD/f+oC>-Pm
%5*%c5"o*.o?^nE/d*pjMe.?,J>`;2d,,A#dP>lk<ma_$LC.>qb\DL.Kg<>"lL/kNS(Es7>#7QB[/sI?8HrP#6EM]*TJDSdcWh<Sa
%5kp!R7WM=c>Tld)RIbdsTTF;+m\tIqi_UO"0QT8e(b,?ritT&FggPcs[ck;Ug3"5$o7Licdk`@Af8XoGj[`I&dng/Rnrl-omFu=1
%=+@Ebc'$pD1!5U@$?>pAEj:b"T3PI%pDtUNbdC=$h';UZ[Jj(<?huh-YND:Zj\30`n-CDT!Et@C/Of#IR769oG&t8O7>m.,F$[V^
%S,7";/W$otYY'K7F;IMhLg!XlC=tSadn?,qPp2V>i6U*^fm#j;K),tu?CF<IJLI<Gbg*+W5!T%\+eO=kFPO8VJ(DgX$hm/ZF%.PX
%?<lSFXSZM05K%uA>^f'g_Bq9mj.LD?kb6/(RBSc$$/Jd??=li`%nSCBB6oJWnk/4MSA**,=%W;I$s1dkEN+g)%1&b.jU1'C'U;^F
%Q*dq:oKgK$_RHKk-I`k'l12jZ4&:rsJ>14!idru8ZaM6rs0$8&LX,MfS1Y`F>^HGIV:48b5!;$Abp>_A<^K%!Klo[@HFnO-Fuu84
%c@>N0n$h2XS[[H\AhI@K.'9]=9"B$?Ib0u\RN/0Wr+p*--Bq("!o)4"0Ad_VkPE'p>.]1.T4\$3j5l?>:HS]<<Z1&78CR1WM=6B7
%:)0Rqn5;cT?tS.3?3>=8F7Ws=PAc+o>l*Z?9o#gOf&"u_C#Z]ea0lJpdJ?oW^RijfD.FjEMr?-606]i]e&*KYbdsfNc`_6]Ds+OA
%kBO5@DpY+g!iC1MF$K!fX5t;tcLtZBrBBKKCAtQg+Sr)KQFSgk%AL'&i)))'efagh&#K_J1(BtE_50a%B#;gC;VPCQHO8]%(2c;=
%1beW$G2Nt0EKOEsn<g'r'lMQbLgTsG/m@\;I6tZ:p"l:2$`4)R>"tg%%\>E2iM!g"5Gi&ZZnR9*2ng`T*%Y*Q7dS:Om4goJ1sN$R
%KX\lo>U;UL#hB$(D\RA7FnOHf/LE2[bnX*)3?iH+P!Zq]I==WZ@9$e(QMF+"5j1A)Gs''s=WXV+j+q1UO//7,E*D/rB'%XLk+gIt
%1Uj'+]lNk2&C#SM]CZ;?1tO,6P&nd\pqf24$bNnB%H9qB[hgE$s.OdZ4QcmDV=/P2,$h(f5bs3\,b'sGj]jN)Q.ra-Ft&j@NaE1n
%md-/J0<=3$q-.)_qhH!2Q((aEBRHkJs2%qa]arX4^YX$WjW-<"*knt.Re3V?_KtNE8nL9tjjr;UjjO,+90;+dWb$(;?Dc0#;Xn33
%4RKkP]k]eZ/5X"U,(:OFfpLZV:p#k@EaP-0_9m@^,aANf(9+$[Rjgl>Li1'WAsJ@(n;CeJ+sY<0*\.-LLlt8%fdlKL@\pJ&cb5GJ
%?LWoQh)EU*?M7;gno*-gP!Qo%?&Tk;O"#0Kc%N\&Zg2=3\_0C5g#Uqgbt!ULFc#IFi#j*&1b.'lCN4-CgBfWV<%14"*1`Sd'LaTo
%C'D>KD7-9Og-W2q=66<%^711Q$&;g<NO\Q_4'R\-47(Yj$laOUagCV+Eqe!aN1%<P3987k8*buAlUX3>I!$],Mn)Hs:'3"9NDmrc
%Vg*YSS#]\;MVmIFnoR<0k,[#YV[gEsYG?Sh1n2)\]8iefBAM'DaBVY-W*HF"E)d9f'2giI'8;b#<gl-?cK+2qbHI4"e,[[Z6+;gI
%I[00GJ(d7FEtac(\DPnR.,2u4\<r3JZ;6?cgfJ*a#c;Z!+A4CM75--EXR*HF;r^2#^?iB.&n[/mY:ecX_Kf4o+[cTu"O/3;ZUKYt
%g"ho^#LgNVCd8u/.QP6,,!rI)q<kr%"deE1PgMir":r`:C@0[kQuaqJnFo?HU1;TtO!PSo8Wm]j6Og+A2F7SobeQ:!drlpDg&I8>
%N*(,M:/DX4ercDE+Il@21c*fMdUREOXrDj2r3WOOpaSP'NEJb,``hPX(V*<Q>USRlfAWi>#%3Wgp?BLL[W'OF>UNGpeD]YFT:0$B
%.A\H.cE6N:@m&?5Fb2)>8Uef>Oq\+!_Erf>CEt?4Ff5\n,5[h4D3d<GdW)2?ig[<\CR2$8MLJ;n1E"0P-%j4&Ac`P*Zr(P$m`-Wk
%=OkB)l2HVs@OM"nM20Oaf"k.gDCMK[r>7Bb5fCL0YW6R9g.tAZ4&M?r[Rpj05rYi8SdNDh=%H*g@c@Z[.\M!)?p>uL/\;)0/#4Oq
%qr0"R%m_m>8Gb\HS.pLt_juqfQa<$?DFMLu<O2Kte\bYSXO78NZqsi5l_X<m`_R5TG6^0n&ngSlgN`C[fMQ\1(W5lHQ79E<k4Y^\
%S1m__]DKGSg/ctnR<CTFCs>`W9tG8_hcp0_oXr)'9G;W<S7S@!21Jb'g\^nn\$<RCfWqXAR+K/m]BqKimMCl$Xik@`R<$&`48RE4
%S,0sM+h1k.MP#^OgMutoUZd[fLY[.%rU)t[rHd4qT<Q%sV_0?jSuUdbh%jtqq7JA>ff+ZM5j']8R!iJ3+jYT&1Pe&sA!kWe%)\H\
%A!lE@]buMYqo1>;#s#UOB&=H&/&"#r0P92ZB#o*kH294,U0e<b6uMUe<>`&\$kpHhG%&V/0hclnAl`?a^+i:pTk>(Zll3jL0l;YR
%9KZX<_9,g?mEQ`NKZ?aTkb-E%-97+<Pub0]nFY:Fs*"^h.a6<?Gk_gLC;ubdl>r\o^_[0H2JtiGUAsh7rnmbRhu>he`9%u20_'2f
%<,#S$6FU$F]'VYo^U:]R4dR><RTkcHp$u@"cMUNII^CjHKtd(/-kGcU,Z`X9*k+[Opo!q[jC9S0itFWWNHgIB,[Csm<Dcaj';7o9
%Y6fq5.'bBS12lBX-h,=k"\$sA;3M_uB\7rL)r%/fJ?Jf/IbTBK5N1:Fc3aF(f%g'I5BdoqQi!Hu]"s6'@2Q!o90E-?P6?-G_`q#J
%F^<AW?:-qF7Gq,OT#nPrl@K^$e6it'H&:"CDVa4S8_$3['PK*qk[fuB5u%)5Y^QGeRkp*)2%.J15CkACB])*LOE<k=@-jRP[>N$C
%&j-0RW>]\/8*V`0/KZZmBG__M%h.!MF\rpBFTi-FWD&Bg:,$XsZ7O)0b,d-jW*a+j^e#`7dj/U)@#m'>LfPi.$8=)m?IiXQ'U[)V
%-q'q3_qINg3*rg=;ag?JiH`21kW5VOeM)cYXL"<N:oI0$U8W#lr`8"n5uVk`Vu$kplPV6S/B037XGFY.%//-%';tMq.T,70A6T$>
%8a`qW!epJNVWo/Z%'p<;MZ1t!3E:Ws0F`oBkm!>&JO9=V,"\<!%&%[6:qt.0Ss*a;Ea`#20@Xq6H&\#l;,uO#78V[Dmk<1o10I'J
%197(OqYUmY*l(rY6qN05;a<\>S>s[LFC,9-13<hpa>sS56'MdDdStpX!LR^A+OX)39p[.WA0F,iJHSg>M>Mju&M+?L#c`U$E%4;$
%a%OWb#7<=X/OW+4BUjZq@Yg2eX#;lP=@E2r$(+OjTb7qu/]i_Q%&L!Qo1Z.&8`gj`Z%bXZ"AP.=?3(h-'Zic>@%V[pdui/a>nVBN
%@?8]@LcILs+Z_[ZX%I9F0h5j`qVO9K7+;md*\sBe0$tjEUar)Vi#J\aU?M_^`kb!q*0aBDH_@[!%lmp>b:WbZ&!R&%)BNT`01f&@
%6]tD<2*+DUn"qhJ*dm2;2qB!#,]gPD\eqRH\<AWQ?O:Ns8.0o)5na%+13=j8Tc[9-HhlKJ+Fl4<'dSd:$BhR5+tUi#4S2G0+U<(#
%$*.p(_8+t8&@`cB13l2"2ut,cTPGCk<0/MsaRO-o+@o^d#pt9-WX2@?TI[hk^(E*170VdYF:%SI=$Wf!>]PBM,(BnG[fi];&3%t$
%Tl]9\S/D^nnIXdmp\Z8Ha2&Z'Ce[`LAU)#n(/\KC7Y`2RRL&,S+@hQlRV9bpNe&RP-*BLnTj)+gfRTqDprmJB+]-A;\os/b'%k@4
%94J>Bf3a-O/qIa=o,QsdY_6p_9QlQ6`kt[]ck#JI#.pPq+i=si![L'CNlY:RaY&-ZK#I>+A`t+Z^h0J11,dka@@r#pqtu0!PQOB7
%37WrZMV!nUHl7K%.];6AW9AM+2*q?1Z(V04.hYH$Y`@+>V+M@s>*o]m6NSQOYp%f``!KHHdt;E;7]#A_ZR^S>^(HK^!ek1K*j.=g
%d1o$?@rt.kBlPT"N"PkXOG3gi#uhQ\DP/Mtk328KC]34pIgL>t(+Urg'A4`^R+rl9S0WA,d8(HZj[@L-RKdKl0>Z_8?o@pt%X'-p
%_D`Yc\&a^kkeZJ?a@X$W&d'BLQ!eW*YaPQ3"'ld&7t6d=p4n"o-/A*=XKZ)6G_6Y9=7Nj19Zq#a!G]UdnV.%GZUC#8Z_`;mop9'l
%9<]?749rLX0B!ubP?iF*/KO0bYL*W;-qLAZidY;9-F3h)$'7BuO'r^oQ^M62Gj!u"4+@Y89B6-GSY"#Q6C36iMV"[PnfV5"B"FiW
%U7m\^#0m?'JjJ6YACFW>()t\qa):Q)=H28ArEr\.-%b(X7Nmm=$qY;WN4fJ-,/Q_cG4;+],$tZ):k16NC')<_FCj)ErE\fo5MYob
%iND'IIg(29gh76I"9Ut(=]/63E0e<l\4smnD&E-]HmP08'!0);c,$Oc9)(loj;&ffP"XX7H=@_]NWZXH-O%NM0>M%^?mPijqR\Iu
%HN#DClOW%Ro,6`c=C$K\kQ7['cIBp/:=2M&mls&N>lp-\Qr4*=C+)Bj#"l*ZKi*hJMA]^iQgg&l`@3jhElD'L#tt-+U)C[!6srE6
%&hIX'<9#?DYUdWRkV"a)rij_`KRNh@[MNpk\Wk:QN_Zn1eR(kF-E[>b09C&,kiHj^g_GI1agqW"8eRG_)b0ePOlF=DkCR0_O'tf=
%+UCOBr$D:$+:\,SWRT'K@!.<h$=Y4+'eoBeJ@XcIYfG^P:9+%%+o#P3+bLdP2BREQ46mD)rUW#5pXiIEScnaeZT&'NV`ET`"B@Z`
%?k*mS)/4!Cp-320#33b<.:mV:?c##;(2#n9'i[S0ogtl$";q:GY'Nm<R)ADXB/'VNa*p&Rg)i3lJ!gW9LJRn`I.EaX-@])B_fHA`
%?o&#5$,.S[M'?oOGK?#A^;ipU#lN1:S\`m*,m&^,EJ:30]P&gjWY&bL8`KsBM(S>CP5dP#/Jp_GP<.?I@?^65R7;]$j<)Ah#Mt16
%O$099)#A4bqXG?tYo!7FbXH#_bnDlD2]cbT6g";O)Ui\9>&HGo:;4/D46pg/Sc?P3JiK)\ke23?gO927nAg6lhGa=5WVuM^p0]6B
%VIuTlGG-,DA8MXfYq:F)[O`+IOSr-a""dUtfUth*%*TC(OB!#+rc>:V!*0f(,Z0[\1gs5T#6P8T8--hdLgpC&SKDL8moAV?Egr?Y
%q-MXW?h6gkrs,Xs]u(?]pT)M%hqRV`DkHX7U(0'>ct#So<1jN_HnUDI=m(-7Pmoq\guh3\X0U^IG!/?9R8rl>X_Ss3`'b'lA+K)U
%lq;>7\g?qeO[/bk:!$<kFYkPM)H4K`FjR*3a97T<Os]K!64:jLi)7\D"]8-.KCo?^*LDsY+HSGX#qE\6XD7l1<gEs:MnJ!fjE=i!
%"bQZ+)QZ8giiTf.C<g2MAX#@faji]M2?r%;@n6Fh(V&Bg>loTqSE?(q.OVhe&J0Oc@"TEDJW)jf^Vac/GX^Y7#1No!?k4Pc8E1C`
%J$%oUDV(1?Wl\qA8iTkBP?bXbTS,oH#-^K0k\@=)WkFi]a'_fd"s-nR<hfb&:n<A-Bp-^(8YCTP4J\N5+lHR;Z^*Skk_T`/kH0q2
%12B.h&u;3$>lrOZ8/pd8YSm;lHDLT1f"ZdF%fS4<m.!@F"9QnrAqqh1HtAZhMC$;t8fspd$FVi;H2LGTlIW6/2R0)1Dn*J(#$]gX
%$T3C8\$VbeAb@oW#e*,^a$sVEk2CJu-YP.g+MqK;M0ZpPr+Hi3MSFgo6qktfJRP(A]tsb40K2.m;1g+aQXGDOYaW?9"M-@)NrD'E
%l6#`qGHfEN<+Z2&\n4H1R?AglLabq5ib"R>?jRHHA$Zc9s,=43rIPk>;eR'NVdjAtQ`?d<9UY,ue+faY'`(?o<_!7'7-&btDM,aA
%2C/%b;VX+ka+lnd(?.'KnNdnb/,g0q!O2XNi8)L/2*D4i]"o7D=6=cX.6*tc#o;GRWq"OrfTdU9oU"rHpqo/m!nK@Ke"Nk&k>6>t
%iKS>hhrgujB+hJ=\_>1?],8k7rM)@tG[7WT=`GpNW`#uYOssc7U]gEVLpip2RE!][-T7;TH@*NpP7MtF,_c'V5<9%1m>k!h;fBG,
%]l^j?5Z9ISGb?hI1*lGu0>l.&49A=GGM4]kFrQjnrd1i.5:O6.]NE_*1+2V'/FjE)C4fT>^M7lI*dWlZE?.hPM%27l`Clc2?DlPb
%bJTM'A\k/gUJnPtWKdiS0_4$X0[a$pfB2+,$8`LB&0rQVHq#Pe//E,A^L+*/H]tRqa<8\KDPC1V9ZKC*6.]X7!d'(VNnY'Q/Fuq<
%W@Z0l/$bis+F?SJ;FSQHgkMO2$8@&oF@nu4AWgEW!9(mFm[I)cA]X__CaO:e=&aXuR@Lg4L?7l,d?sON&8X=FU=:I3K(O7ir2M)P
%Sp:m-aM&lPIZTsImM#XjP8V+B/q,`*L+[pW6Mdlr'pV;Z4Z]YAk"#QXP2_cHR"uLAiG]@$U[/\Ws'"rdl'RE(2F*MllA-E*!bSI,
%b(F]2/,VpX1kI]+3(Vu`9C*IP&('e;O[3V2h+.GBgHCe#e?)3f]HF'AG"8]*8`@'R9=sSHc=+3\oRch64FFR:UGLMNHUIXO52auH
%6auXjNHXHu*oHu2TAYds+"T!DG/0pMs7;sC*<~>
%AI9_PrivateDataEnd
